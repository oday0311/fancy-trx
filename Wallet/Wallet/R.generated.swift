//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `RemoteConfigDefaults.plist`.
    static let remoteConfigDefaultsPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "RemoteConfigDefaults", pathExtension: "plist")
    /// Resource file `bignumber.min.js`.
    static let bignumberMinJs = Rswift.FileResource(bundle: R.hostingBundle, name: "bignumber.min", pathExtension: "js")
    /// Resource file `html`.
    static let html = Rswift.FileResource(bundle: R.hostingBundle, name: "html", pathExtension: "")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RemoteConfigDefaults", withExtension: "plist")`
    static func remoteConfigDefaultsPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.remoteConfigDefaultsPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "bignumber.min", withExtension: "js")`
    static func bignumberMinJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.bignumberMinJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "html", withExtension: "")`
    static func html(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.html
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 106 images.
  struct image {
    /// Image `alert_cancle`.
    static let alert_cancle = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert_cancle")
    /// Image `alert_sure`.
    static let alert_sure = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert_sure")
    /// Image `back_up`.
    static let back_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_up")
    /// Image `backup_warning`.
    static let backup_warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "backup_warning")
    /// Image `balance_bg`.
    static let balance_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "balance_bg")
    /// Image `balance_code`.
    static let balance_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "balance_code")
    /// Image `browser-bookmark`.
    static let browserBookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "browser-bookmark")
    /// Image `browser-history`.
    static let browserHistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "browser-history")
    /// Image `browser-home`.
    static let browserHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "browser-home")
    /// Image `browser_scan`.
    static let browser_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "browser_scan")
    /// Image `cell_arrow`.
    static let cell_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "cell_arrow")
    /// Image `common_add`.
    static let common_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_add")
    /// Image `common_close_white`.
    static let common_close_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_close_white")
    /// Image `common_close`.
    static let common_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "common_close")
    /// Image `create_wallet_import`.
    static let create_wallet_import = Rswift.ImageResource(bundle: R.hostingBundle, name: "create_wallet_import")
    /// Image `create_wallet`.
    static let create_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "create_wallet")
    /// Image `cube`.
    static let cube = Rswift.ImageResource(bundle: R.hostingBundle, name: "cube")
    /// Image `dapps_icon`.
    static let dapps_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "dapps_icon")
    /// Image `deposit`.
    static let deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "deposit")
    /// Image `error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "error")
    /// Image `ethereum_logo_256`.
    static let ethereum_logo_256 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ethereum_logo_256")
    /// Image `exchange`.
    static let exchange = Rswift.ImageResource(bundle: R.hostingBundle, name: "exchange")
    /// Image `feed`.
    static let feed = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed")
    /// Image `glasses`.
    static let glasses = Rswift.ImageResource(bundle: R.hostingBundle, name: "glasses")
    /// Image `ic_arrow`.
    static let ic_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow")
    /// Image `ic_back_white`.
    static let ic_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_white")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_cell_arrow`.
    static let ic_cell_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cell_arrow")
    /// Image `ic_check_circle`.
    static let ic_check_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_circle")
    /// Image `ic_check`.
    static let ic_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check")
    /// Image `ic_freeze`.
    static let ic_freeze = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_freeze")
    /// Image `ic_qrcode`.
    static let ic_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qrcode")
    /// Image `ic_scan`.
    static let ic_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scan")
    /// Image `ic_tron_power`.
    static let ic_tron_power = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tron_power")
    /// Image `ic_watch`.
    static let ic_watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_watch")
    /// Image `icon_Wallets`.
    static let icon_Wallets = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Wallets")
    /// Image `icon_acount_highlight`.
    static let icon_acount_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_acount_highlight")
    /// Image `icon_acount_nor`.
    static let icon_acount_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_acount_nor")
    /// Image `icon_cold`.
    static let icon_cold = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cold")
    /// Image `icon_set_node`.
    static let icon_set_node = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_set_node")
    /// Image `icon_set_password`.
    static let icon_set_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_set_password")
    /// Image `icon_set_share`.
    static let icon_set_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_set_share")
    /// Image `icon_setting_highlight`.
    static let icon_setting_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_highlight")
    /// Image `icon_setting_nor`.
    static let icon_setting_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_nor")
    /// Image `icon_token_highlight`.
    static let icon_token_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_token_highlight")
    /// Image `icon_token_nor`.
    static let icon_token_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_token_nor")
    /// Image `icon_transactions_highlight`.
    static let icon_transactions_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transactions_highlight")
    /// Image `icon_transactions_nor`.
    static let icon_transactions_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_transactions_nor")
    /// Image `icon_vote_highlight`.
    static let icon_vote_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vote_highlight")
    /// Image `icon_vote_nor`.
    static let icon_vote_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vote_nor")
    /// Image `import_options`.
    static let import_options = Rswift.ImageResource(bundle: R.hostingBundle, name: "import_options")
    /// Image `launch_screen_logo`.
    static let launch_screen_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_screen_logo")
    /// Image `login_logo`.
    static let login_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_logo")
    /// Image `mascot_happy`.
    static let mascot_happy = Rswift.ImageResource(bundle: R.hostingBundle, name: "mascot_happy")
    /// Image `no_transactions_mascot`.
    static let no_transactions_mascot = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_transactions_mascot")
    /// Image `onboarding_erc20`.
    static let onboarding_erc20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_erc20")
    /// Image `onboarding_lock`.
    static let onboarding_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_lock")
    /// Image `onboarding_open_source`.
    static let onboarding_open_source = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_open_source")
    /// Image `onboarding_rocket`.
    static let onboarding_rocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_rocket")
    /// Image `onepassword-button`.
    static let onepasswordButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "onepassword-button")
    /// Image `qr_code_icon`.
    static let qr_code_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_code_icon")
    /// Image `register_check_n`.
    static let register_check_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_check_n")
    /// Image `register_check_s`.
    static let register_check_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_check_s")
    /// Image `settings-currency`.
    static let settingsCurrency = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-currency")
    /// Image `settings-share`.
    static let settingsShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-share")
    /// Image `settings-wallet`.
    static let settingsWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-wallet")
    /// Image `settings_bug`.
    static let settings_bug = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_bug")
    /// Image `settings_discord`.
    static let settings_discord = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_discord")
    /// Image `settings_donate`.
    static let settings_donate = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_donate")
    /// Image `settings_email`.
    static let settings_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_email")
    /// Image `settings_export`.
    static let settings_export = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_export")
    /// Image `settings_facebook`.
    static let settings_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_facebook")
    /// Image `settings_faq`.
    static let settings_faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_faq")
    /// Image `settings_icon`.
    static let settings_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_icon")
    /// Image `settings_lock`.
    static let settings_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_lock")
    /// Image `settings_open_source`.
    static let settings_open_source = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_open_source")
    /// Image `settings_preferences`.
    static let settings_preferences = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_preferences")
    /// Image `settings_privacy_policy`.
    static let settings_privacy_policy = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_privacy_policy")
    /// Image `settings_push_notifications`.
    static let settings_push_notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_push_notifications")
    /// Image `settings_rating`.
    static let settings_rating = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_rating")
    /// Image `settings_road_map`.
    static let settings_road_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_road_map")
    /// Image `settings_server`.
    static let settings_server = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_server")
    /// Image `settings_telegram`.
    static let settings_telegram = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_telegram")
    /// Image `settings_terms`.
    static let settings_terms = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_terms")
    /// Image `settings_twitter`.
    static let settings_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_twitter")
    /// Image `settings_wallet`.
    static let settings_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_wallet")
    /// Image `toolbar-back`.
    static let toolbarBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-back")
    /// Image `toolbar-menu`.
    static let toolbarMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-menu")
    /// Image `transaction_detail_check`.
    static let transaction_detail_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_detail_check")
    /// Image `transaction_empty`.
    static let transaction_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_empty")
    /// Image `transaction_error`.
    static let transaction_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_error")
    /// Image `transaction_pending`.
    static let transaction_pending = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_pending")
    /// Image `transaction_received`.
    static let transaction_received = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_received")
    /// Image `transaction_sent`.
    static let transaction_sent = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_sent")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    /// Image `tron_black`.
    static let tron_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "tron_black")
    /// Image `tron_gray`.
    static let tron_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "tron_gray")
    /// Image `tron_light`.
    static let tron_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "tron_light")
    /// Image `tron_otherasset_icon`.
    static let tron_otherasset_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tron_otherasset_icon")
    /// Image `tron_white`.
    static let tron_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "tron_white")
    /// Image `vote_input_icon`.
    static let vote_input_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_input_icon")
    /// Image `vote_number_icon`.
    static let vote_number_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_number_icon")
    /// Image `vote_tip_bg`.
    static let vote_tip_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_tip_bg")
    /// Image `wallet_colod`.
    static let wallet_colod = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_colod")
    /// Image `wallet_hot`.
    static let wallet_hot = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_hot")
    /// Image `welcome_logo`.
    static let welcome_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_logo")
    
    /// `UIImage(named: "alert_cancle", bundle: ..., traitCollection: ...)`
    static func alert_cancle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alert_cancle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "alert_sure", bundle: ..., traitCollection: ...)`
    static func alert_sure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alert_sure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back_up", bundle: ..., traitCollection: ...)`
    static func back_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_up, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backup_warning", bundle: ..., traitCollection: ...)`
    static func backup_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backup_warning, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "balance_bg", bundle: ..., traitCollection: ...)`
    static func balance_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.balance_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "balance_code", bundle: ..., traitCollection: ...)`
    static func balance_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.balance_code, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "browser-bookmark", bundle: ..., traitCollection: ...)`
    static func browserBookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browserBookmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "browser-history", bundle: ..., traitCollection: ...)`
    static func browserHistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browserHistory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "browser-home", bundle: ..., traitCollection: ...)`
    static func browserHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browserHome, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "browser_scan", bundle: ..., traitCollection: ...)`
    static func browser_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cell_arrow", bundle: ..., traitCollection: ...)`
    static func cell_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cell_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_add", bundle: ..., traitCollection: ...)`
    static func common_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_close", bundle: ..., traitCollection: ...)`
    static func common_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common_close_white", bundle: ..., traitCollection: ...)`
    static func common_close_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.common_close_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "create_wallet", bundle: ..., traitCollection: ...)`
    static func create_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.create_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "create_wallet_import", bundle: ..., traitCollection: ...)`
    static func create_wallet_import(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.create_wallet_import, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cube", bundle: ..., traitCollection: ...)`
    static func cube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dapps_icon", bundle: ..., traitCollection: ...)`
    static func dapps_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dapps_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deposit", bundle: ..., traitCollection: ...)`
    static func deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deposit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ethereum_logo_256", bundle: ..., traitCollection: ...)`
    static func ethereum_logo_256(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ethereum_logo_256, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exchange", bundle: ..., traitCollection: ...)`
    static func exchange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exchange, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "feed", bundle: ..., traitCollection: ...)`
    static func feed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "glasses", bundle: ..., traitCollection: ...)`
    static func glasses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glasses, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow", bundle: ..., traitCollection: ...)`
    static func ic_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back_white", bundle: ..., traitCollection: ...)`
    static func ic_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cell_arrow", bundle: ..., traitCollection: ...)`
    static func ic_cell_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cell_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check", bundle: ..., traitCollection: ...)`
    static func ic_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_check_circle", bundle: ..., traitCollection: ...)`
    static func ic_check_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_freeze", bundle: ..., traitCollection: ...)`
    static func ic_freeze(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_freeze, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_qrcode", bundle: ..., traitCollection: ...)`
    static func ic_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qrcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_scan", bundle: ..., traitCollection: ...)`
    static func ic_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tron_power", bundle: ..., traitCollection: ...)`
    static func ic_tron_power(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tron_power, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_watch", bundle: ..., traitCollection: ...)`
    static func ic_watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_watch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_Wallets", bundle: ..., traitCollection: ...)`
    static func icon_Wallets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Wallets, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_acount_highlight", bundle: ..., traitCollection: ...)`
    static func icon_acount_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_acount_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_acount_nor", bundle: ..., traitCollection: ...)`
    static func icon_acount_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_acount_nor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cold", bundle: ..., traitCollection: ...)`
    static func icon_cold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cold, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_set_node", bundle: ..., traitCollection: ...)`
    static func icon_set_node(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_set_node, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_set_password", bundle: ..., traitCollection: ...)`
    static func icon_set_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_set_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_set_share", bundle: ..., traitCollection: ...)`
    static func icon_set_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_set_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_highlight", bundle: ..., traitCollection: ...)`
    static func icon_setting_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting_nor", bundle: ..., traitCollection: ...)`
    static func icon_setting_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_nor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_token_highlight", bundle: ..., traitCollection: ...)`
    static func icon_token_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_token_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_token_nor", bundle: ..., traitCollection: ...)`
    static func icon_token_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_token_nor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transactions_highlight", bundle: ..., traitCollection: ...)`
    static func icon_transactions_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transactions_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_transactions_nor", bundle: ..., traitCollection: ...)`
    static func icon_transactions_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_transactions_nor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vote_highlight", bundle: ..., traitCollection: ...)`
    static func icon_vote_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vote_highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vote_nor", bundle: ..., traitCollection: ...)`
    static func icon_vote_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vote_nor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "import_options", bundle: ..., traitCollection: ...)`
    static func import_options(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.import_options, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_screen_logo", bundle: ..., traitCollection: ...)`
    static func launch_screen_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_screen_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_logo", bundle: ..., traitCollection: ...)`
    static func login_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mascot_happy", bundle: ..., traitCollection: ...)`
    static func mascot_happy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mascot_happy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "no_transactions_mascot", bundle: ..., traitCollection: ...)`
    static func no_transactions_mascot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_transactions_mascot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_erc20", bundle: ..., traitCollection: ...)`
    static func onboarding_erc20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_erc20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_lock", bundle: ..., traitCollection: ...)`
    static func onboarding_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_open_source", bundle: ..., traitCollection: ...)`
    static func onboarding_open_source(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_open_source, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_rocket", bundle: ..., traitCollection: ...)`
    static func onboarding_rocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_rocket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onepassword-button", bundle: ..., traitCollection: ...)`
    static func onepasswordButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onepasswordButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qr_code_icon", bundle: ..., traitCollection: ...)`
    static func qr_code_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_code_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "register_check_n", bundle: ..., traitCollection: ...)`
    static func register_check_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_check_n, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "register_check_s", bundle: ..., traitCollection: ...)`
    static func register_check_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_check_s, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings-currency", bundle: ..., traitCollection: ...)`
    static func settingsCurrency(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsCurrency, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings-share", bundle: ..., traitCollection: ...)`
    static func settingsShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsShare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings-wallet", bundle: ..., traitCollection: ...)`
    static func settingsWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsWallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_bug", bundle: ..., traitCollection: ...)`
    static func settings_bug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_bug, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_discord", bundle: ..., traitCollection: ...)`
    static func settings_discord(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_discord, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_donate", bundle: ..., traitCollection: ...)`
    static func settings_donate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_donate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_email", bundle: ..., traitCollection: ...)`
    static func settings_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_export", bundle: ..., traitCollection: ...)`
    static func settings_export(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_export, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_facebook", bundle: ..., traitCollection: ...)`
    static func settings_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_faq", bundle: ..., traitCollection: ...)`
    static func settings_faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_faq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_icon", bundle: ..., traitCollection: ...)`
    static func settings_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_lock", bundle: ..., traitCollection: ...)`
    static func settings_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_open_source", bundle: ..., traitCollection: ...)`
    static func settings_open_source(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_open_source, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_preferences", bundle: ..., traitCollection: ...)`
    static func settings_preferences(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_preferences, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_privacy_policy", bundle: ..., traitCollection: ...)`
    static func settings_privacy_policy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_privacy_policy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_push_notifications", bundle: ..., traitCollection: ...)`
    static func settings_push_notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_push_notifications, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_rating", bundle: ..., traitCollection: ...)`
    static func settings_rating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_rating, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_road_map", bundle: ..., traitCollection: ...)`
    static func settings_road_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_road_map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_server", bundle: ..., traitCollection: ...)`
    static func settings_server(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_server, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_telegram", bundle: ..., traitCollection: ...)`
    static func settings_telegram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_telegram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_terms", bundle: ..., traitCollection: ...)`
    static func settings_terms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_terms, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_twitter", bundle: ..., traitCollection: ...)`
    static func settings_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_wallet", bundle: ..., traitCollection: ...)`
    static func settings_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-back", bundle: ..., traitCollection: ...)`
    static func toolbarBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-menu", bundle: ..., traitCollection: ...)`
    static func toolbarMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_detail_check", bundle: ..., traitCollection: ...)`
    static func transaction_detail_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_detail_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_empty", bundle: ..., traitCollection: ...)`
    static func transaction_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_error", bundle: ..., traitCollection: ...)`
    static func transaction_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_pending", bundle: ..., traitCollection: ...)`
    static func transaction_pending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_pending, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_received", bundle: ..., traitCollection: ...)`
    static func transaction_received(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_received, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_sent", bundle: ..., traitCollection: ...)`
    static func transaction_sent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_sent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tron_black", bundle: ..., traitCollection: ...)`
    static func tron_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tron_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tron_gray", bundle: ..., traitCollection: ...)`
    static func tron_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tron_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tron_light", bundle: ..., traitCollection: ...)`
    static func tron_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tron_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tron_otherasset_icon", bundle: ..., traitCollection: ...)`
    static func tron_otherasset_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tron_otherasset_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tron_white", bundle: ..., traitCollection: ...)`
    static func tron_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tron_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_input_icon", bundle: ..., traitCollection: ...)`
    static func vote_input_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_input_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_number_icon", bundle: ..., traitCollection: ...)`
    static func vote_number_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_number_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_tip_bg", bundle: ..., traitCollection: ...)`
    static func vote_tip_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_tip_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_colod", bundle: ..., traitCollection: ...)`
    static func wallet_colod(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_colod, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_hot", bundle: ..., traitCollection: ...)`
    static func wallet_hot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_hot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "welcome_logo", bundle: ..., traitCollection: ...)`
    static func welcome_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_logo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 22 nibs.
  struct nib {
    /// Nib `AccountAssetTableViewCell`.
    static let accountAssetTableViewCell = _R.nib._AccountAssetTableViewCell()
    /// Nib `AccountViewCell`.
    static let accountViewCell = _R.nib._AccountViewCell()
    /// Nib `AlerButtonBar`.
    static let alerButtonBar = _R.nib._AlerButtonBar()
    /// Nib `ColdTransactionView`.
    static let coldTransactionView = _R.nib._ColdTransactionView()
    /// Nib `EditTokenTableViewCell`.
    static let editTokenTableViewCell = _R.nib._EditTokenTableViewCell()
    /// Nib `FrozenView`.
    static let frozenView = _R.nib._FrozenView()
    /// Nib `NodeInputView`.
    static let nodeInputView = _R.nib._NodeInputView()
    /// Nib `NodeTableViewCell`.
    static let nodeTableViewCell = _R.nib._NodeTableViewCell()
    /// Nib `NonFungibleTokenViewCell`.
    static let nonFungibleTokenViewCell = _R.nib._NonFungibleTokenViewCell()
    /// Nib `PopTipViewController`.
    static let popTipViewController = _R.nib._PopTipViewController()
    /// Nib `SetSwitchTableViewCell`.
    static let setSwitchTableViewCell = _R.nib._SetSwitchTableViewCell()
    /// Nib `SetTableViewCell`.
    static let setTableViewCell = _R.nib._SetTableViewCell()
    /// Nib `SignedTransactionView`.
    static let signedTransactionView = _R.nib._SignedTransactionView()
    /// Nib `TokenPurchaseView`.
    static let tokenPurchaseView = _R.nib._TokenPurchaseView()
    /// Nib `TokenTableViewCell`.
    static let tokenTableViewCell = _R.nib._TokenTableViewCell()
    /// Nib `TransactionTableViewCell`.
    static let transactionTableViewCell = _R.nib._TransactionTableViewCell()
    /// Nib `VoteConfirmView`.
    static let voteConfirmView = _R.nib._VoteConfirmView()
    /// Nib `VoteInputView`.
    static let voteInputView = _R.nib._VoteInputView()
    /// Nib `VoteTableViewCell`.
    static let voteTableViewCell = _R.nib._VoteTableViewCell()
    /// Nib `WalletModeView`.
    static let walletModeView = _R.nib._WalletModeView()
    /// Nib `WalletTableViewCell`.
    static let walletTableViewCell = _R.nib._WalletTableViewCell()
    /// Nib `WordCollectionViewCell`.
    static let wordCollectionViewCell = _R.nib._WordCollectionViewCell()
    
    /// `UINib(name: "AccountAssetTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountAssetTableViewCell) instead")
    static func accountAssetTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountAssetTableViewCell)
    }
    
    /// `UINib(name: "AccountViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountViewCell) instead")
    static func accountViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountViewCell)
    }
    
    /// `UINib(name: "AlerButtonBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.alerButtonBar) instead")
    static func alerButtonBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.alerButtonBar)
    }
    
    /// `UINib(name: "ColdTransactionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.coldTransactionView) instead")
    static func coldTransactionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coldTransactionView)
    }
    
    /// `UINib(name: "EditTokenTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editTokenTableViewCell) instead")
    static func editTokenTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editTokenTableViewCell)
    }
    
    /// `UINib(name: "FrozenView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.frozenView) instead")
    static func frozenView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.frozenView)
    }
    
    /// `UINib(name: "NodeInputView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.nodeInputView) instead")
    static func nodeInputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nodeInputView)
    }
    
    /// `UINib(name: "NodeTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.nodeTableViewCell) instead")
    static func nodeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nodeTableViewCell)
    }
    
    /// `UINib(name: "NonFungibleTokenViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.nonFungibleTokenViewCell) instead")
    static func nonFungibleTokenViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nonFungibleTokenViewCell)
    }
    
    /// `UINib(name: "PopTipViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popTipViewController) instead")
    static func popTipViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popTipViewController)
    }
    
    /// `UINib(name: "SetSwitchTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.setSwitchTableViewCell) instead")
    static func setSwitchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setSwitchTableViewCell)
    }
    
    /// `UINib(name: "SetTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.setTableViewCell) instead")
    static func setTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setTableViewCell)
    }
    
    /// `UINib(name: "SignedTransactionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signedTransactionView) instead")
    static func signedTransactionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signedTransactionView)
    }
    
    /// `UINib(name: "TokenPurchaseView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tokenPurchaseView) instead")
    static func tokenPurchaseView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tokenPurchaseView)
    }
    
    /// `UINib(name: "TokenTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tokenTableViewCell) instead")
    static func tokenTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tokenTableViewCell)
    }
    
    /// `UINib(name: "TransactionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionTableViewCell) instead")
    static func transactionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionTableViewCell)
    }
    
    /// `UINib(name: "VoteConfirmView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.voteConfirmView) instead")
    static func voteConfirmView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.voteConfirmView)
    }
    
    /// `UINib(name: "VoteInputView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.voteInputView) instead")
    static func voteInputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.voteInputView)
    }
    
    /// `UINib(name: "VoteTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.voteTableViewCell) instead")
    static func voteTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.voteTableViewCell)
    }
    
    /// `UINib(name: "WalletModeView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletModeView) instead")
    static func walletModeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletModeView)
    }
    
    /// `UINib(name: "WalletTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletTableViewCell) instead")
    static func walletTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletTableViewCell)
    }
    
    /// `UINib(name: "WordCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.wordCollectionViewCell) instead")
    static func wordCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wordCollectionViewCell)
    }
    
    static func accountAssetTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountAssetTableViewCell? {
      return R.nib.accountAssetTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountAssetTableViewCell
    }
    
    static func accountViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountViewCell? {
      return R.nib.accountViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountViewCell
    }
    
    static func alerButtonBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.alerButtonBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func coldTransactionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColdTransactionView? {
      return R.nib.coldTransactionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColdTransactionView
    }
    
    static func editTokenTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditTokenTableViewCell? {
      return R.nib.editTokenTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditTokenTableViewCell
    }
    
    static func frozenView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FrozenView? {
      return R.nib.frozenView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FrozenView
    }
    
    static func nodeInputView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.nodeInputView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func nodeTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NodeTableViewCell? {
      return R.nib.nodeTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NodeTableViewCell
    }
    
    static func nonFungibleTokenViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NonFungibleTokenViewCell? {
      return R.nib.nonFungibleTokenViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NonFungibleTokenViewCell
    }
    
    static func popTipViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.popTipViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func setSwitchTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SetSwitchTableViewCell? {
      return R.nib.setSwitchTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetSwitchTableViewCell
    }
    
    static func setTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SetTableViewCell? {
      return R.nib.setTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetTableViewCell
    }
    
    static func signedTransactionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignedTransactionView? {
      return R.nib.signedTransactionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignedTransactionView
    }
    
    static func tokenPurchaseView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TokenPurchaseView? {
      return R.nib.tokenPurchaseView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TokenPurchaseView
    }
    
    static func tokenTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TokenTableViewCell? {
      return R.nib.tokenTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TokenTableViewCell
    }
    
    static func transactionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
      return R.nib.transactionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
    }
    
    static func voteConfirmView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.voteConfirmView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func voteInputView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VoteInputView? {
      return R.nib.voteInputView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VoteInputView
    }
    
    static func voteTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VoteTableViewCell? {
      return R.nib.voteTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VoteTableViewCell
    }
    
    static func walletModeView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletModeView? {
      return R.nib.walletModeView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletModeView
    }
    
    static func walletTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletTableViewCell? {
      return R.nib.walletTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletTableViewCell
    }
    
    static func wordCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WordCollectionViewCell? {
      return R.nib.wordCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WordCollectionViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 11 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AccountAssetTableViewCell`.
    static let accountAssetTableViewCell: Rswift.ReuseIdentifier<AccountAssetTableViewCell> = Rswift.ReuseIdentifier(identifier: "AccountAssetTableViewCell")
    /// Reuse identifier `AccountViewCell`.
    static let accountViewCell: Rswift.ReuseIdentifier<AccountViewCell> = Rswift.ReuseIdentifier(identifier: "AccountViewCell")
    /// Reuse identifier `NodeTableViewCell`.
    static let nodeTableViewCell: Rswift.ReuseIdentifier<NodeTableViewCell> = Rswift.ReuseIdentifier(identifier: "NodeTableViewCell")
    /// Reuse identifier `NonFungibleTokenViewCell`.
    static let nonFungibleTokenViewCell: Rswift.ReuseIdentifier<NonFungibleTokenViewCell> = Rswift.ReuseIdentifier(identifier: "NonFungibleTokenViewCell")
    /// Reuse identifier `SetSwitchTableViewCell`.
    static let setSwitchTableViewCell: Rswift.ReuseIdentifier<SetSwitchTableViewCell> = Rswift.ReuseIdentifier(identifier: "SetSwitchTableViewCell")
    /// Reuse identifier `SetTableViewCell`.
    static let setTableViewCell: Rswift.ReuseIdentifier<SetTableViewCell> = Rswift.ReuseIdentifier(identifier: "SetTableViewCell")
    /// Reuse identifier `TokenTableViewCell`.
    static let tokenTableViewCell: Rswift.ReuseIdentifier<TokenTableViewCell> = Rswift.ReuseIdentifier(identifier: "TokenTableViewCell")
    /// Reuse identifier `TransactionTableViewCell`.
    static let transactionTableViewCell: Rswift.ReuseIdentifier<TransactionTableViewCell> = Rswift.ReuseIdentifier(identifier: "TransactionTableViewCell")
    /// Reuse identifier `VoteTableViewCell`.
    static let voteTableViewCell: Rswift.ReuseIdentifier<VoteTableViewCell> = Rswift.ReuseIdentifier(identifier: "VoteTableViewCell")
    /// Reuse identifier `WalletTableViewCell`.
    static let walletTableViewCell: Rswift.ReuseIdentifier<WalletTableViewCell> = Rswift.ReuseIdentifier(identifier: "WalletTableViewCell")
    /// Reuse identifier `word`.
    static let word: Rswift.ReuseIdentifier<WordCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "word")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `Balance`.
    static let balance = _R.storyboard.balance()
    /// Storyboard `Browser`.
    static let browser = _R.storyboard.browser()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Set`.
    static let set = _R.storyboard.set()
    /// Storyboard `Token`.
    static let token = _R.storyboard.token()
    /// Storyboard `Transaction`.
    static let transaction = _R.storyboard.transaction()
    /// Storyboard `Vote`.
    static let vote = _R.storyboard.vote()
    
    /// `UIStoryboard(name: "Balance", bundle: ...)`
    static func balance(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.balance)
    }
    
    /// `UIStoryboard(name: "Browser", bundle: ...)`
    static func browser(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.browser)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Set", bundle: ...)`
    static func set(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.set)
    }
    
    /// `UIStoryboard(name: "Token", bundle: ...)`
    static func token(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.token)
    }
    
    /// `UIStoryboard(name: "Transaction", bundle: ...)`
    static func transaction(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transaction)
    }
    
    /// `UIStoryboard(name: "Vote", bundle: ...)`
    static func vote(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.vote)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 230 localization keys.
    struct localizable {
      /// de translation: %@ Adresse
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let importWalletWatchPlaceholder = Rswift.StringResource(key: "import.wallet.watch.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: AGB
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsTermsOfServiceButtonTitle = Rswift.StringResource(key: "settings.termsOfService.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Abbrechen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Abgewiesen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let transactionCellFailedTitle = Rswift.StringResource(key: "transaction.cell.failed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Adresse kopieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let copyTrustCoreAddress = Rswift.StringResource(key: "Copy TrustCore.Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Adresse kopieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let requestCopyWalletButtonTitle = Rswift.StringResource(key: "request.copyWallet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Adresse kopiert
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let requestAddressCopiedTitle = Rswift.StringResource(key: "request.addressCopied.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Airdrops von Partnern
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsPushNotificationsAirdropButtonTitle = Rswift.StringResource(key: "settings.pushNotifications.airdrop.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Aktualisierung
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let refresh = Rswift.StringResource(key: "Refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Alle
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsCurrencyAllLabelTitle = Rswift.StringResource(key: "settings.currency.all.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: An
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let confirmPaymentToLabelTitle = Rswift.StringResource(key: "confirmPayment.to.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: An
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static let transactionToLabelTitle = Rswift.StringResource(key: "transaction.to.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "th"], comment: nil)
      /// de translation: Backup-Optionen vorbereiten...
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let exportPresentBackupOptionsLabelTitle = Rswift.StringResource(key: "export.presentBackupOptions.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Backup-Passwort
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let enterPasswordNavigationTitle = Rswift.StringResource(key: "enterPassword.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Balance: %@ ETH
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsWalletsBalance = Rswift.StringResource(key: "settings.wallets.balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Bearbeiten
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi", "th"], comment: nil)
      /// de translation: Bei %@ anzeigen
      /// 
      /// Locales: de, zh-Hans, ja, en
      static let nftDetailsInternalButtonTitle = Rswift.StringResource(key: "nft.details.internal.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en"], comment: nil)
      /// de translation: Bei OpenSea.io anzeigen
      /// 
      /// Locales: de, zh-Hans, ja, en
      static let nftDetailsExternalButtonTitle = Rswift.StringResource(key: "nft.details.external.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en"], comment: nil)
      /// de translation: Bei OpenSea.io stöbern
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static let collectiblesDiscoverLabelTitle = Rswift.StringResource(key: "collectibles.discover.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi", "th"], comment: nil)
      /// de translation: Beliebt
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsCurrencyPopularLabelTitle = Rswift.StringResource(key: "settings.currency.popular.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Benutzerdefiniert
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsNetworkCustomLabelTitle = Rswift.StringResource(key: "settings.network.custom.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Benutzerdefiniertes Netzwerk
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsCustomNetworkNavigationTitle = Rswift.StringResource(key: "settings.customNetwork.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Bestätigen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let confirmPaymentConfirmButtonTitle = Rswift.StringResource(key: "confirmPayment.confirm.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Bestätigung
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let transactionConfirmationLabelTitle = Rswift.StringResource(key: "transaction.confirmation.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Bewerten Sie uns im App Store
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsRateUsAppStoreButtonTitle = Rswift.StringResource(key: "settings.rateUsAppStore.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Bitte warten Sie bis die Transaktion in die Blockchain aufgenommen wurde. Details werden dann angezeigt.
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, ru, fr, th
      static let sentTransactionMessage = Rswift.StringResource(key: "sent.transaction.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Block #
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let transactionBlockNumberLabelTitle = Rswift.StringResource(key: "transaction.blockNumber.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Browser
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let browserTabbarItemTitle = Rswift.StringResource(key: "browser.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Chain-ID
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let chainID = Rswift.StringResource(key: "Chain ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Community
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsCommunityLabelTitle = Rswift.StringResource(key: "settings.community.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: DApps Browser
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsDappbroserButtonTitle = Rswift.StringResource(key: "settings.dappbroser.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Da nur Sie Ihr Geld kontrollieren, müssen Sie Ihren Backup-Keystore speichern, falls diese App gelöscht wird.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let exportControlYourMoneyLabelTitle = Rswift.StringResource(key: "export.controlYourMoney.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Das Gaslimit verhindert, dass intelligente Verträge alle Ihre %@ verbrauchen. Wir werden versuchen, das Gaslimit automatisch für Sie zu berechnen, aber einige intelligente Verträge erfordern möglicherweise ein benutzerdefiniertes Gaslimit.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let configureTransactionGasLimitLabelDescription = Rswift.StringResource(key: "configureTransaction.gasLimit.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Das schnellste Ethereum-Wallet-Erlebnis auf Mobilgeräten
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomeUltraReliableLabelDescription = Rswift.StringResource(key: "welcome.ultraReliable.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Daten
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let confirmPaymentDataLabelTitle = Rswift.StringResource(key: "confirmPayment.data.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Datenschutzbestimmungen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsPrivacyPolicyButtonTitle = Rswift.StringResource(key: "settings.privacyPolicy.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Der Code ist Open Source (GPL-3.0-Lizenz) und vollständig auditiert.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomeFullyTransparentLabelDescription = Rswift.StringResource(key: "welcome.fullyTransparent.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Der Community beitreten
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let settingsJoinCommunityLabelTitle = Rswift.StringResource(key: "settings.joinCommunity.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Dezimalstellen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let decimals = Rswift.StringResource(key: "Decimals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Die E-Mail konnte nicht gesendet werden. Stellen Sie sicher, dass Sie eine Mail-App installiert haben.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsErrorFailedToSendEmail = Rswift.StringResource(key: "settings.error.failedToSendEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Diese Wallet könnte nur zum Anschauen verwendet werden. Importieren Sie den privaten Schlüssel / Keystore, um Transaktionen zu signieren
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let inCoordinatorErrorOnlyWatchAccount = Rswift.StringResource(key: "InCoordinatorError.onlyWatchAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: ERC20-kompatibel
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomeErc20LabelTitle = Rswift.StringResource(key: "welcome.erc20.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Ein benutzerdefiniertes Token bearbeiten
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let tokensTokenEditNavigationTitle = Rswift.StringResource(key: "tokens.token.edit.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Einen Fehler melden
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsReportBugButtonTitle = Rswift.StringResource(key: "settings.reportBug.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Einfügen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let sendPasteButtonTitle = Rswift.StringResource(key: "send.paste.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Einstellungen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsNavigationTitle = Rswift.StringResource(key: "settings.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Einstellungen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsPreferencesTitle = Rswift.StringResource(key: "settings.preferences.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Einzahlen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru
      static let transactionsReceiveButtonTitle = Rswift.StringResource(key: "transactions.receive.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "ru"], comment: nil)
      /// de translation: Empfänger-Adresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let sendRecipientAddressTextFieldPlaceholder = Rswift.StringResource(key: "send.recipientAddress.textField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Endpunkt
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let endpoint = Rswift.StringResource(key: "Endpoint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Erhalten
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let transactionCellReceivedTitle = Rswift.StringResource(key: "transaction.cell.received.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Erweitert
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let advanced = Rswift.StringResource(key: "Advanced", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Ethereum-Adresse
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let ethereumTrustCoreAddress = Rswift.StringResource(key: "Ethereum TrustCore.Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Etwas ging schief, versuchen Sie es erneut.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let errorViewDescriptionLabelTitle = Rswift.StringResource(key: "errorView.description.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Export auf eigene Gefahr!
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let exportWarningPrivateKey = Rswift.StringResource(key: "export.warning.private.key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Extrem zuverlässig
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomeUltraReliableLabelTitle = Rswift.StringResource(key: "welcome.ultraReliable.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: FAQ
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static let settingsFaqButtonTitle = Rswift.StringResource(key: "settings.faq.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "th"], comment: nil)
      /// de translation: Falsche Eingabe
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let sendErrorWrongInput = Rswift.StringResource(key: "send.error.wrongInput", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Falsche PIN. Sie haben %d Versuche.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let lockEnterPasscodeViewModelIncorrectPasscode = Rswift.StringResource(key: "lock.enter.passcode.view.model.incorrect.passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Fehler
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let transactionCellErrorTitle = Rswift.StringResource(key: "transaction.cell.error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Füge ein benutzerdefiniertes Token hinzu
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let tokensNewtokenNavigationTitle = Rswift.StringResource(key: "tokens.newtoken.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: GERÄTESICHERHEIT BEEINTRÄCHTIGT
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let appDeviceJailbreakTitle = Rswift.StringResource(key: "app.device.jailbreak.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Gaslimit
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let configureTransactionGasLimitLabelTitle = Rswift.StringResource(key: "configureTransaction.gasLimit.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Gaslimit
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let confirmPaymentGasLimitLabelTitle = Rswift.StringResource(key: "confirmPayment.gasLimit.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Gaspreis
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let configureTransactionGasPriceLabelTitle = Rswift.StringResource(key: "configureTransaction.gasPrice.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Gaspreis
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let confirmPaymentGasPriceLabelTitle = Rswift.StringResource(key: "confirmPayment.gasPrice.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Gaspreis (Gwei)
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let configureTransactionGasPriceGweiLabelTitle = Rswift.StringResource(key: "configureTransaction.gasPriceGwei.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Gaspreis (Gwei)
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let transactionGasFeeLabelTitle = Rswift.StringResource(key: "transaction.gasFee.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Geben Sie Ihre PIN ein
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let lockEnterPasscodeViewModelInitial = Rswift.StringResource(key: "lock.enter.passcode.view.model.initial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Geben Sie das aktuelle Passwort ein, um Ihre Wallet zu exportieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let exportEnterCurrentPasswordTextFieldTitle = Rswift.StringResource(key: "export.enterCurrentPassword.textField.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Geben Sie ein Passwort ein, um Ihre Wallet zu verschlüsseln
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let exportEnterPasswordTextFieldTitle = Rswift.StringResource(key: "export.enterPassword.textField.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Geben Sie ein Passwort ein, um Ihre Wallet zu verschlüsseln
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let enterPasswordPasswordHeaderPlaceholder = Rswift.StringResource(key: "enterPassword.password.header.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Geben Sie ein neues Passwort ein
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let lockCreatePasscodeViewModelInitial = Rswift.StringResource(key: "lock.create.passcode.view.model.initial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Geben Sie ihr Passwort erneut ein
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let lockCreatePasscodeViewModelConfirm = Rswift.StringResource(key: "lock.create.passcode.view.model.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Gelegentlich erhalten Sie von unseren offiziellen Partnern Angebote zur Teilnahme an Airdrops.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsPushNotificationsAirdropFooter = Rswift.StringResource(key: "settings.pushNotifications.airdrop.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Genehmigen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let approve = Rswift.StringResource(key: "Approve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Gesamtgebühr für das Netzwerk
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let configureTransactionTotalNetworkFeeLabelTitle = Rswift.StringResource(key: "configureTransaction.totalNetworkFee.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Gesendet
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let transactionCellSentTitle = Rswift.StringResource(key: "transaction.cell.sent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Gesendet und empfangen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsPushNotificationsPaymentButtonTitle = Rswift.StringResource(key: "settings.pushNotifications.payment.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Gestern
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let yesterday = Rswift.StringResource(key: "Yesterday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: HD Wallet
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let walletSectionHdWalletTitle = Rswift.StringResource(key: "wallet.section.hdWallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Halten Sie, um anzuzeigen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let exportRevealButtonTitle = Rswift.StringResource(key: "export.reveal.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Helfen Sie uns, indem Sie diese App mit Ihren Freunden teilen!
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let welldoneDescriptionLabelText = Rswift.StringResource(key: "welldone.description.label.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Heute
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let today = Rswift.StringResource(key: "Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Hier ist die App, mit der ich meine ETH und ERC20-Token aufbewahre.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let welldoneViewmodelSharingText1 = Rswift.StringResource(key: "welldone.viewmodel.sharing.text1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Ich bewahre meine Ethereum und ERC20-Tokens in der Trust-Wallet sicher auf.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let welldoneViewmodelSharingText3 = Rswift.StringResource(key: "welldone.viewmodel.sharing.text3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Ich sichere meine Ethereum und ERC20-Tokens in der Trust-Wallet.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let welldoneViewmodelSharingText4 = Rswift.StringResource(key: "welldone.viewmodel.sharing.text4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Ihre Wallet wird niemals in Cloud-Speicher- oder Geräte-Backups gespeichert.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let exportNeverStoredLabelTitle = Rswift.StringResource(key: "export.neverStored.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Import
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let importWalletImportButtonTitle = Rswift.StringResource(key: "importWallet.import.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Je höher der Gaspreis ist, desto höher ist die Transaktionsgebühr, aber desto schneller wird Ihre Transaktion vom %@ -Netzwerk bearbeitet.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let configureTransactionGasPriceLabelDescription = Rswift.StringResource(key: "configureTransaction.gasPrice.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Jede Jailbreak-App kann auf Trust-Schlüsselbunddaten zugreifen und Ihre Wallet stehlen! Deinstallieren Sie diese Wallet sofort und installieren Sie sie auf einem sicheren Gerät neu.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let appDeviceJailbreakDescription = Rswift.StringResource(key: "app.device.jailbreak.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Jeder mit Ihrem privaten Schlüssel hat vollen Zugriff auf Ihre Wallet
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let exportWarningTwoPrivateKey = Rswift.StringResource(key: "export.warningTwo.private.key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Kaufen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let transactionsDepositButtonTitle = Rswift.StringResource(key: "transactions.deposit.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Kein Backup, kein %@ .
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let exportNoBackupLabelTitle = Rswift.StringResource(key: "export.noBackup.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Kein privater Schlüssel für die Wallet
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let exportNoKPrivateKeyLabelTitle = Rswift.StringResource(key: "export.noKPrivateKey.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Keine Sammlerstücke gefunden
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let emptyViewNoNonTokensLabelTitle = Rswift.StringResource(key: "emptyView.noNonTokens.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Keystore JSON
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let keystoreJSON = Rswift.StringResource(key: "Keystore JSON", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Kopieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let copy = Rswift.StringResource(key: "Copy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Laden %@
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let loadingDots = Rswift.StringResource(key: "loading.dots", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Leer
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let empty = Rswift.StringResource(key: "Empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Leeres Clipboard
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let sendErrorEmptyClipBoard = Rswift.StringResource(key: "send.error.emptyClipBoard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Lesezeichen
      /// 
      /// Locales: de, zh-Hans, ja, en, ru
      static let bookmarks = Rswift.StringResource(key: "Bookmarks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "ru"], comment: nil)
      /// de translation: Lesezeichen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let browserBookmarksTitle = Rswift.StringResource(key: "browser.bookmarks.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Lesezeichen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static let browserBookmarksButtonTitle = Rswift.StringResource(key: "browser.bookmarks.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi", "th"], comment: nil)
      /// de translation: Lesezeichen hinzufügen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static let browserAddbookmarkButtonTitle = Rswift.StringResource(key: "browser.addbookmark.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi", "th"], comment: nil)
      /// de translation: Löschen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi", "th"], comment: nil)
      /// de translation: Löschen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let deleting = Rswift.StringResource(key: "Deleting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Löschen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let accountsConfirmDeleteOkTitle = Rswift.StringResource(key: "accounts.confirm.delete.okTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Max.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let sendMaxButtonTitle = Rswift.StringResource(key: "send.max.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Max. Gesamt
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static let confirmPaymentMaxTotalLabelTitle = Rswift.StringResource(key: "confirmPayment.maxTotal.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi", "th"], comment: nil)
      /// de translation: Mehr Details
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let moreDetails = Rswift.StringResource(key: "More Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Mehr erfahren
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsLearnMoreLabelTitle = Rswift.StringResource(key: "settings.learnMore.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Meine %1$@ -Adresse lautet: %2$@
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let requestMyAddressIsLabelTitle = Rswift.StringResource(key: "request.myAddressIs.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Meine Adresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let transactionsMyAddressButtonTitle = Rswift.StringResource(key: "transactions.myAddress.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Meine öffentliche %@ Wallet-Adresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let requestMyPublicaddressLabelTitle = Rswift.StringResource(key: "request.myPublicaddress.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Menge
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let sendAmountTextFieldPlaceholder = Rswift.StringResource(key: "send.amount.textField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Mit Freunden teilen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let settingsShareWithFriendsButtonTitle = Rswift.StringResource(key: "settings.shareWithFriends.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Mit Touch ID anmelden
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let lockEnterPasscodeViewModelTouchId = Rswift.StringResource(key: "lock.enter.passcode.view.model.touch.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Mnemonisch
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let mnemonic = Rswift.StringResource(key: "Mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Name
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "th"], comment: nil)
      /// de translation: Netzwerk
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsNetworkButtonTitle = Rswift.StringResource(key: "settings.network.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Netzwerkgebühr
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let confirmPaymentGasFeeLabelTitle = Rswift.StringResource(key: "confirmPayment.gasFee.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Neu
      /// 
      /// Locales: de, zh-Hans, ja, en, ru
      static let new = Rswift.StringResource(key: "New", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "ru"], comment: nil)
      /// de translation: Neu laden
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let browserReloadButtonTitle = Rswift.StringResource(key: "browser.reload.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Nicht wieder anzeigen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static let settingsNetworkTestWarnningDontShowAgain = Rswift.StringResource(key: "settings.network.test.warnning.dont.show.again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Noch keine Lesezeichen!
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static let bookmarksNoBookmarksLabelTitle = Rswift.StringResource(key: "bookmarks.noBookmarks.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi", "th"], comment: nil)
      /// de translation: Noch keine Transaktionen!
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let transactionsNoTransactionsLabelTitle = Rswift.StringResource(key: "transactions.noTransactions.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Noch keine Transaktionen!
      /// 
      /// Locales: de, zh-Hans, ja, en, ru
      static let historyNoHistoryLabelTitle = Rswift.StringResource(key: "history.noHistory.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "ru"], comment: nil)
      /// de translation: Nonce
      /// 
      /// Locales: de, zh-Hans, ja, en
      static let configureTransactionNonceLabelTitle = Rswift.StringResource(key: "configureTransaction.nonce.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en"], comment: nil)
      /// de translation: Nächster
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: OK
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Open-Source-Entwicklung
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsOpenSourceDevelopmentLabelTitle = Rswift.StringResource(key: "settings.openSourceDevelopment.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: PIN / Biometrie
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsBiometricsDisabledLabelTitle = Rswift.StringResource(key: "settings.biometricsDisabled.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: PIN einrichten
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let lockCreatePasscodeViewModelTitle = Rswift.StringResource(key: "lock.create.passcode.view.model.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Passwort
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Passwort
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static let enterPasswordPasswordTextFieldPlaceholder = Rswift.StringResource(key: "enterPassword.password.textField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "th"], comment: nil)
      /// de translation: Passwort / %@
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsBiometricsEnabledLabelTitle = Rswift.StringResource(key: "settings.biometricsEnabled.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Passwort bestätigen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let enterPasswordConfirmPasswordTextFieldPlaceholder = Rswift.StringResource(key: "enterPassword.confirmPassword.textField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Passwörter stimmen nicht überein!
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let enterPasswordPasswordNoMatchError = Rswift.StringResource(key: "enterPassword.passwordNoMatch.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Privat und sicher
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomePrivateAndSecureLabelTitle = Rswift.StringResource(key: "welcome.privateAndSecure.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Private Schlüssel verlassen Ihr Gerät nie.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomePrivateAndSecureLabelDescription = Rswift.StringResource(key: "welcome.privateAndSecure.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Privaten Schlüssel exportieren
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let exportPrivateKeyNavigationTitle = Rswift.StringResource(key: "export.privateKey.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Privaten Schlüssel exportieren
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let walletsExportAlertSheetTitle = Rswift.StringResource(key: "wallets.export.alertSheet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Privater Schlüssel
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let privateKey = Rswift.StringResource(key: "Private Key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Probieren Sie Trust aus - die Wallet, in der ich meine Ethereum und ERC20-Token sicher aufbewahren kann.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let welldoneViewmodelSharingText2 = Rswift.StringResource(key: "welldone.viewmodel.sharing.text2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Push-Benachrichtigungen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsPushNotificationsButtonTitle = Rswift.StringResource(key: "settings.pushNotifications.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Push-Benachrichtigungen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsPushNotificationsTitle = Rswift.StringResource(key: "settings.pushNotifications.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Push-Benachrichtigungen zulassen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsAllowPushNotificationsButtonTitle = Rswift.StringResource(key: "settings.allowPushNotifications.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: QR-Code generieren
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let exportQrCodeLoadingLabel = Rswift.StringResource(key: "export.qrCode.loading.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: QR-Code-Leser
      /// 
      /// Locales: de, zh-Hans, ja, en
      static let browserQrCodeButtonTitle = Rswift.StringResource(key: "browser.qrCode.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en"], comment: nil)
      /// de translation: Quellcode
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsSourceCodeButtonTitle = Rswift.StringResource(key: "settings.sourceCode.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: RayboWallet unterstützt standardmäßig ERC20-Tokens.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomeErc20LabelDescription = Rswift.StringResource(key: "welcome.erc20.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Sammlerstücke
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let collectibles = Rswift.StringResource(key: "Collectibles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Schreiben Sie diesen Satz auf und bewahren Sie es privat und sicher auf. Sie können Ihre Wallet nicht wiederherstellen, wenn Sie diesen verlieren!
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let passphraseRememberLabelTitle = Rswift.StringResource(key: "passphrase.remember.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Schreiben Sie uns eine E-Mail
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsEmailUsButtonTitle = Rswift.StringResource(key: "settings.emailUs.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Schreiben Sie uns eine Email (Lies zuerst die FAQ)
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsEmailUsReadFAQButtonTitle = Rswift.StringResource(key: "settings.emailUsReadFAQ.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Senden
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Sicherheit
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsSecurityLabelTitle = Rswift.StringResource(key: "settings.security.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Sicherungsschlüsselspeicher
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let walletsBackupAlertSheetTitle = Rswift.StringResource(key: "wallets.backup.alertSheet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Sie haben noch keine Tokens erhalten!
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let emptyViewNoTokensLabelTitle = Rswift.StringResource(key: "emptyView.noTokens.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Sie wechseln in ein Testnetz, in dem Transaktionen nur zu Testzwecken durchgeführt werden.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static let settingsNetworkTestWarnningMessage = Rswift.StringResource(key: "settings.network.test.warnning.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Sie werden über gesendete und empfangene Transaktionen benachrichtigt.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsPushNotificationsAllowPushNotificationsFooter = Rswift.StringResource(key: "settings.pushNotifications.allowPushNotifications.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Sind Sie sicher, dass Sie diese Wallet löschen möchten?
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let accountsConfirmDeleteTitle = Rswift.StringResource(key: "accounts.confirm.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Sind Sie sicher, dass Sie dieses Lesezeichen löschen möchten?
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let browserBookmarksConfirmDeleteTitle = Rswift.StringResource(key: "browser.bookmarks.confirm.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Spenden
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsDonateButtonTitle = Rswift.StringResource(key: "settings.donate.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Stellen Sie sicher, dass Sie ein Backup Ihrer Wallet erstellt haben.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let accountsConfirmDeleteMessage = Rswift.StringResource(key: "accounts.confirm.delete.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Suchen oder geben Sie die URL der Website ein
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let browserUrlTextfieldPlaceholder = Rswift.StringResource(key: "browser.url.textfield.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Support
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsSupportLabelTitle = Rswift.StringResource(key: "settings.support.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Support
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static let settingsSupportTitle = Rswift.StringResource(key: "settings.support.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi", "th"], comment: nil)
      /// de translation: Symbol
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let symbol = Rswift.StringResource(key: "Symbol", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Teilen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let browserShareButtonTitle = Rswift.StringResource(key: "browser.share.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Teilen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let welldoneShareLabelText = Rswift.StringResource(key: "welldone.share.label.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Test
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let settingsNetworkTestLabelTitle = Rswift.StringResource(key: "settings.network.test.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Tokens
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let tokens = Rswift.StringResource(key: "Tokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Tokens
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let tokensNavigationTitle = Rswift.StringResource(key: "tokens.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Tokens
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let tokensTabbarItemTitle = Rswift.StringResource(key: "tokens.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Tokens erscheinen automatisch. Drücke "+", um Tokens manuell hinzuzufügen.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let tokensFooterLabelTitle = Rswift.StringResource(key: "tokens.footer.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Tokens suchen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let editTokensSearchBarPlaceholderTitle = Rswift.StringResource(key: "editTokens.searchBar.placeholder.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Transaktion #
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let transactionIdLabelTitle = Rswift.StringResource(key: "transaction.id.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Transaktion gesendet!
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static let sentTransactionTitle = Rswift.StringResource(key: "sent.transaction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Transaktionen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let transactionsTabbarItemTitle = Rswift.StringResource(key: "transactions.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Transaktions-ID kopieren
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let sendActionCopyTransactionTitle = Rswift.StringResource(key: "send.action.copy.transaction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Transaktionsdaten (optional)
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let configureTransactionDataLabelTitle = Rswift.StringResource(key: "configureTransaction.data.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Transaktionszeit
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static let transactionTimeLabelTitle = Rswift.StringResource(key: "transaction.time.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "th"], comment: nil)
      /// de translation: Trust Feedback
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsFeedbackEmailTitle = Rswift.StringResource(key: "settings.feedback.email.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Unbekannt
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let transactionCellUnknownTitle = Rswift.StringResource(key: "transaction.cell.unknown.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Ungültige Adresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let sendErrorInvalidAddress = Rswift.StringResource(key: "send.error.invalidAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Ungültige Menge
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let sendErrorInvalidAmount = Rswift.StringResource(key: "send.error.invalidAmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Verlauf
      /// 
      /// Locales: de, zh-Hans, ja, en, ru
      static let history = Rswift.StringResource(key: "History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "ru"], comment: nil)
      /// de translation: Version
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsVersionLabelTitle = Rswift.StringResource(key: "settings.version.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Versuchen Sie es in 1 Minute erneut
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static let lockEnterPasscodeViewModelTryAfterOneMinute = Rswift.StringResource(key: "lock.enter.passcode.view.model.try.after.one.minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "th"], comment: nil)
      /// de translation: Vertragsadresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let contractTrustCoreAddress = Rswift.StringResource(key: "Contract TrustCore.Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Vielen Dank!
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi, th
      static let welldoneNavigationTitle = Rswift.StringResource(key: "welldone.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi", "th"], comment: nil)
      /// de translation: Von
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let confirmPaymentFromLabelTitle = Rswift.StringResource(key: "confirmPayment.from.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Von
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let transactionFromLabelTitle = Rswift.StringResource(key: "transaction.from.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Völlig transparent
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomeFullyTransparentLabelTitle = Rswift.StringResource(key: "welcome.fullyTransparent.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: WALLET ERSTELLEN
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomeCreateWalletButtonTitle = Rswift.StringResource(key: "welcome.createWallet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: WALLET IMPORTIEREN
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let welcomeImportWalletButtonTitle = Rswift.StringResource(key: "welcome.importWallet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wallet
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let walletNavigationTitle = Rswift.StringResource(key: "wallet.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wallet importieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let importNavigationTitle = Rswift.StringResource(key: "import.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wallet sichern
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let exportBackupButtonTitle = Rswift.StringResource(key: "export.backup.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wallet wird importiert...
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let importWalletImportingIndicatorLabelTitle = Rswift.StringResource(key: "importWallet.importingIndicator.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wallet-Optionen importieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let importWalletImportAlertSheetTitle = Rswift.StringResource(key: "importWallet.import.alertSheet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wallets
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsWalletsButtonTitle = Rswift.StringResource(key: "settings.wallets.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wallets
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static let walletsNavigationTitle = Rswift.StringResource(key: "wallets.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Warnung
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static let settingsNetworkTestWarnningTitle = Rswift.StringResource(key: "settings.network.test.warnning.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Wiederherstellungssatz
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static let recoveryPhraseNavigationTitle = Rswift.StringResource(key: "recoveryPhrase.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "pt-BR", "vi"], comment: nil)
      /// de translation: Wiederholen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let retry = Rswift.StringResource(key: "Retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wird bearbeitet...
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, fr
      static let transactionCellPendingTitle = Rswift.StringResource(key: "transaction.cell.pending.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "fr"], comment: nil)
      /// de translation: Wird empfangen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let transactionCellReceivingTitle = Rswift.StringResource(key: "transaction.cell.receiving.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wird geladen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wird gesendet
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static let transactionCellSendingTitle = Rswift.StringResource(key: "transaction.cell.sending.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr", "th"], comment: nil)
      /// de translation: Wo möchten Sie kaufen?
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let depositBuyLabelTitle = Rswift.StringResource(key: "deposit.buy.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Währung
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let settingsCurrencyButtonTitle = Rswift.StringResource(key: "settings.currency.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Wörter getrennt durch ein Leerzeichen. (Enthält normalerweise 12 Wörter)
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static let importWalletMnemonicPlaceholder = Rswift.StringResource(key: "import.wallet.mnemonic.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "vi"], comment: nil)
      /// de translation: Zeige Tokens beim Start der App
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static let settingsPreferencesButtonTitle = Rswift.StringResource(key: "settings.preferences.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi"], comment: nil)
      /// de translation: Zur Startseite
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static let browserHomeButtonTitle = Rswift.StringResource(key: "browser.home.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en", "zh-Hant", "vi", "th"], comment: nil)
      /// de translation: ermöglicht durch OpenSea
      /// 
      /// Locales: de, zh-Hans, ja, en
      static let nftPoweredByLabelText = Rswift.StringResource(key: "nft.poweredBy.label.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "zh-Hans", "ja", "en"], comment: nil)
      /// de translation: iCloud / Dropbox / Google Drive
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let importWalletImportAlertSheetOptionTitle = Rswift.StringResource(key: "importWallet.import.alertSheet.option.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Überspringen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let exportSkipButtonTitle = Rswift.StringResource(key: "export.skip.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: Übertragen %@
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let transactionCellTokenTransferTitle = Rswift.StringResource(key: "transaction.cell.tokenTransfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: über Changelly
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let depositBuyButtonChangellyTitle = Rswift.StringResource(key: "deposit.buy.button.changelly.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: über Coinbase
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let depositBuyButtonCoinbaseTitle = Rswift.StringResource(key: "deposit.buy.button.coinbase.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// de translation: über ShapeShift (nur Kryptowährungen)
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static let depositBuyButtonShapeShiftTitle = Rswift.StringResource(key: "deposit.buy.button.shapeShift.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["de", "ar", "zh-Hans", "ja", "en", "es", "it", "zh-Hant", "pt-BR", "vi", "ru", "fr"], comment: nil)
      /// en translation: Data (Optional). %@
      /// 
      /// Locales: en
      static let configureTransactionDataFieldLabelTitle = Rswift.StringResource(key: "configureTransaction.dataField.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Nonce
      /// 
      /// Locales: en
      static let nonce = Rswift.StringResource(key: "Nonce", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Recipient
      /// 
      /// Locales: en
      static let transactionRecipientLabelTitle = Rswift.StringResource(key: "transaction.recipient.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sender
      /// 
      /// Locales: en
      static let transactionSenderLabelTitle = Rswift.StringResource(key: "transaction.sender.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// zh-Hans translation: Gas 费用太高，最大可用：%1$@ %2$@
      /// 
      /// Locales: zh-Hans, ja, en, vi, th
      static let configureTransactionErrorGasFeeHigh = Rswift.StringResource(key: "configureTransaction.error.gasFeeHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en", "vi", "th"], comment: nil)
      /// zh-Hans translation: 禁用
      /// 
      /// Locales: zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static let disable = Rswift.StringResource(key: "Disable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en", "zh-Hant", "vi", "ru", "fr", "th"], comment: nil)
      
      /// de translation: %@ Adresse
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func importWalletWatchPlaceholder(_ value1: String) -> String {
        return String(format: NSLocalizedString("import.wallet.watch.placeholder", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: AGB
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsTermsOfServiceButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.termsOfService.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Abbrechen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Abgewiesen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func transactionCellFailedTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.failed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Adresse kopieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func copyTrustCoreAddress(_: Void = ()) -> String {
        return NSLocalizedString("Copy TrustCore.Address", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Adresse kopieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func requestCopyWalletButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("request.copyWallet.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Adresse kopiert
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func requestAddressCopiedTitle(_: Void = ()) -> String {
        return NSLocalizedString("request.addressCopied.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Airdrops von Partnern
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsPushNotificationsAirdropButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.airdrop.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Aktualisierung
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func refresh(_: Void = ()) -> String {
        return NSLocalizedString("Refresh", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Alle
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsCurrencyAllLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.currency.all.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: An
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func confirmPaymentToLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.to.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: An
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static func transactionToLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.to.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Backup-Optionen vorbereiten...
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func exportPresentBackupOptionsLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.presentBackupOptions.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Backup-Passwort
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func enterPasswordNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Balance: %@ ETH
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsWalletsBalance(_ value1: String) -> String {
        return String(format: NSLocalizedString("settings.wallets.balance", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Bearbeiten
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("Edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Bei %@ anzeigen
      /// 
      /// Locales: de, zh-Hans, ja, en
      static func nftDetailsInternalButtonTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("nft.details.internal.button.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Bei OpenSea.io anzeigen
      /// 
      /// Locales: de, zh-Hans, ja, en
      static func nftDetailsExternalButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("nft.details.external.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Bei OpenSea.io stöbern
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static func collectiblesDiscoverLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("collectibles.discover.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Beliebt
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsCurrencyPopularLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.currency.popular.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Benutzerdefiniert
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsNetworkCustomLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.custom.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Benutzerdefiniertes Netzwerk
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsCustomNetworkNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.customNetwork.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Bestätigen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func confirmPaymentConfirmButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.confirm.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Bestätigung
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func transactionConfirmationLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.confirmation.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Bewerten Sie uns im App Store
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsRateUsAppStoreButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.rateUsAppStore.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Bitte warten Sie bis die Transaktion in die Blockchain aufgenommen wurde. Details werden dann angezeigt.
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, ru, fr, th
      static func sentTransactionMessage(_: Void = ()) -> String {
        return NSLocalizedString("sent.transaction.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Block #
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func transactionBlockNumberLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.blockNumber.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Browser
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func browserTabbarItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.tabbar.item.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Chain-ID
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func chainID(_: Void = ()) -> String {
        return NSLocalizedString("Chain ID", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Community
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsCommunityLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.community.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: DApps Browser
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsDappbroserButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.dappbroser.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Da nur Sie Ihr Geld kontrollieren, müssen Sie Ihren Backup-Keystore speichern, falls diese App gelöscht wird.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func exportControlYourMoneyLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.controlYourMoney.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Das Gaslimit verhindert, dass intelligente Verträge alle Ihre %@ verbrauchen. Wir werden versuchen, das Gaslimit automatisch für Sie zu berechnen, aber einige intelligente Verträge erfordern möglicherweise ein benutzerdefiniertes Gaslimit.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func configureTransactionGasLimitLabelDescription(_ value1: String) -> String {
        return String(format: NSLocalizedString("configureTransaction.gasLimit.label.description", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Das schnellste Ethereum-Wallet-Erlebnis auf Mobilgeräten
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomeUltraReliableLabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("welcome.ultraReliable.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Daten
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func confirmPaymentDataLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.data.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Datenschutzbestimmungen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsPrivacyPolicyButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.privacyPolicy.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Der Code ist Open Source (GPL-3.0-Lizenz) und vollständig auditiert.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomeFullyTransparentLabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("welcome.fullyTransparent.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Der Community beitreten
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func settingsJoinCommunityLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.joinCommunity.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Dezimalstellen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func decimals(_: Void = ()) -> String {
        return NSLocalizedString("Decimals", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Die E-Mail konnte nicht gesendet werden. Stellen Sie sicher, dass Sie eine Mail-App installiert haben.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsErrorFailedToSendEmail(_: Void = ()) -> String {
        return NSLocalizedString("settings.error.failedToSendEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Diese Wallet könnte nur zum Anschauen verwendet werden. Importieren Sie den privaten Schlüssel / Keystore, um Transaktionen zu signieren
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func inCoordinatorErrorOnlyWatchAccount(_: Void = ()) -> String {
        return NSLocalizedString("InCoordinatorError.onlyWatchAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: ERC20-kompatibel
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomeErc20LabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.erc20.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Ein benutzerdefiniertes Token bearbeiten
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func tokensTokenEditNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.token.edit.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Einen Fehler melden
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsReportBugButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.reportBug.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Einfügen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func sendPasteButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.paste.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Einstellungen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Einstellungen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsPreferencesTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Einzahlen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru
      static func transactionsReceiveButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.receive.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Empfänger-Adresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func sendRecipientAddressTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("send.recipientAddress.textField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Endpunkt
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func endpoint(_: Void = ()) -> String {
        return NSLocalizedString("Endpoint", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Erhalten
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func transactionCellReceivedTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.received.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Erweitert
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func advanced(_: Void = ()) -> String {
        return NSLocalizedString("Advanced", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Ethereum-Adresse
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func ethereumTrustCoreAddress(_: Void = ()) -> String {
        return NSLocalizedString("Ethereum TrustCore.Address", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Etwas ging schief, versuchen Sie es erneut.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func errorViewDescriptionLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("errorView.description.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Export auf eigene Gefahr!
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func exportWarningPrivateKey(_: Void = ()) -> String {
        return NSLocalizedString("export.warning.private.key", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Extrem zuverlässig
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomeUltraReliableLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.ultraReliable.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: FAQ
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static func settingsFaqButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.faq.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Falsche Eingabe
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func sendErrorWrongInput(_: Void = ()) -> String {
        return NSLocalizedString("send.error.wrongInput", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Falsche PIN. Sie haben %d Versuche.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func lockEnterPasscodeViewModelIncorrectPasscode(_ value1: Int) -> String {
        return String(format: NSLocalizedString("lock.enter.passcode.view.model.incorrect.passcode", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Fehler
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func transactionCellErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.error.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Füge ein benutzerdefiniertes Token hinzu
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func tokensNewtokenNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.newtoken.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: GERÄTESICHERHEIT BEEINTRÄCHTIGT
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func appDeviceJailbreakTitle(_: Void = ()) -> String {
        return NSLocalizedString("app.device.jailbreak.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gaslimit
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func configureTransactionGasLimitLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.gasLimit.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gaslimit
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func confirmPaymentGasLimitLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.gasLimit.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gaspreis
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func configureTransactionGasPriceLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.gasPrice.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gaspreis
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func confirmPaymentGasPriceLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.gasPrice.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gaspreis (Gwei)
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func configureTransactionGasPriceGweiLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.gasPriceGwei.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gaspreis (Gwei)
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func transactionGasFeeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.gasFee.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Geben Sie Ihre PIN ein
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func lockEnterPasscodeViewModelInitial(_: Void = ()) -> String {
        return NSLocalizedString("lock.enter.passcode.view.model.initial", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Geben Sie das aktuelle Passwort ein, um Ihre Wallet zu exportieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func exportEnterCurrentPasswordTextFieldTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.enterCurrentPassword.textField.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Geben Sie ein Passwort ein, um Ihre Wallet zu verschlüsseln
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func exportEnterPasswordTextFieldTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.enterPassword.textField.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Geben Sie ein Passwort ein, um Ihre Wallet zu verschlüsseln
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func enterPasswordPasswordHeaderPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.password.header.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Geben Sie ein neues Passwort ein
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func lockCreatePasscodeViewModelInitial(_: Void = ()) -> String {
        return NSLocalizedString("lock.create.passcode.view.model.initial", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Geben Sie ihr Passwort erneut ein
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func lockCreatePasscodeViewModelConfirm(_: Void = ()) -> String {
        return NSLocalizedString("lock.create.passcode.view.model.confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gelegentlich erhalten Sie von unseren offiziellen Partnern Angebote zur Teilnahme an Airdrops.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsPushNotificationsAirdropFooter(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.airdrop.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Genehmigen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func approve(_: Void = ()) -> String {
        return NSLocalizedString("Approve", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gesamtgebühr für das Netzwerk
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func configureTransactionTotalNetworkFeeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.totalNetworkFee.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gesendet
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func transactionCellSentTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.sent.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gesendet und empfangen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsPushNotificationsPaymentButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.payment.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Gestern
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func yesterday(_: Void = ()) -> String {
        return NSLocalizedString("Yesterday", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: HD Wallet
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func walletSectionHdWalletTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.section.hdWallet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Halten Sie, um anzuzeigen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func exportRevealButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.reveal.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Helfen Sie uns, indem Sie diese App mit Ihren Freunden teilen!
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func welldoneDescriptionLabelText(_: Void = ()) -> String {
        return NSLocalizedString("welldone.description.label.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Heute
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func today(_: Void = ()) -> String {
        return NSLocalizedString("Today", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Hier ist die App, mit der ich meine ETH und ERC20-Token aufbewahre.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func welldoneViewmodelSharingText1(_: Void = ()) -> String {
        return NSLocalizedString("welldone.viewmodel.sharing.text1", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Ich bewahre meine Ethereum und ERC20-Tokens in der Trust-Wallet sicher auf.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func welldoneViewmodelSharingText3(_: Void = ()) -> String {
        return NSLocalizedString("welldone.viewmodel.sharing.text3", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Ich sichere meine Ethereum und ERC20-Tokens in der Trust-Wallet.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func welldoneViewmodelSharingText4(_: Void = ()) -> String {
        return NSLocalizedString("welldone.viewmodel.sharing.text4", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Ihre Wallet wird niemals in Cloud-Speicher- oder Geräte-Backups gespeichert.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func exportNeverStoredLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.neverStored.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Import
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func importWalletImportButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("importWallet.import.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Je höher der Gaspreis ist, desto höher ist die Transaktionsgebühr, aber desto schneller wird Ihre Transaktion vom %@ -Netzwerk bearbeitet.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func configureTransactionGasPriceLabelDescription(_ value1: String) -> String {
        return String(format: NSLocalizedString("configureTransaction.gasPrice.label.description", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Jede Jailbreak-App kann auf Trust-Schlüsselbunddaten zugreifen und Ihre Wallet stehlen! Deinstallieren Sie diese Wallet sofort und installieren Sie sie auf einem sicheren Gerät neu.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func appDeviceJailbreakDescription(_: Void = ()) -> String {
        return NSLocalizedString("app.device.jailbreak.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Jeder mit Ihrem privaten Schlüssel hat vollen Zugriff auf Ihre Wallet
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func exportWarningTwoPrivateKey(_: Void = ()) -> String {
        return NSLocalizedString("export.warningTwo.private.key", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Kaufen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func transactionsDepositButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.deposit.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Kein Backup, kein %@ .
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func exportNoBackupLabelTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("export.noBackup.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Kein privater Schlüssel für die Wallet
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func exportNoKPrivateKeyLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.noKPrivateKey.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Keine Sammlerstücke gefunden
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func emptyViewNoNonTokensLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("emptyView.noNonTokens.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Keystore JSON
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func keystoreJSON(_: Void = ()) -> String {
        return NSLocalizedString("Keystore JSON", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Kopieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func copy(_: Void = ()) -> String {
        return NSLocalizedString("Copy", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Laden %@
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func loadingDots(_ value1: String) -> String {
        return String(format: NSLocalizedString("loading.dots", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Leer
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func empty(_: Void = ()) -> String {
        return NSLocalizedString("Empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Leeres Clipboard
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func sendErrorEmptyClipBoard(_: Void = ()) -> String {
        return NSLocalizedString("send.error.emptyClipBoard", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Lesezeichen
      /// 
      /// Locales: de, zh-Hans, ja, en, ru
      static func bookmarks(_: Void = ()) -> String {
        return NSLocalizedString("Bookmarks", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Lesezeichen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func browserBookmarksTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.bookmarks.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Lesezeichen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static func browserBookmarksButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.bookmarks.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Lesezeichen hinzufügen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static func browserAddbookmarkButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.addbookmark.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Löschen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Löschen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func deleting(_: Void = ()) -> String {
        return NSLocalizedString("Deleting", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Löschen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func accountsConfirmDeleteOkTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.confirm.delete.okTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Max.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func sendMaxButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.max.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Max. Gesamt
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static func confirmPaymentMaxTotalLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.maxTotal.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Mehr Details
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func moreDetails(_: Void = ()) -> String {
        return NSLocalizedString("More Details", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Mehr erfahren
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsLearnMoreLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.learnMore.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Meine %1$@ -Adresse lautet: %2$@
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func requestMyAddressIsLabelTitle(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("request.myAddressIs.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// de translation: Meine Adresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func transactionsMyAddressButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.myAddress.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Meine öffentliche %@ Wallet-Adresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func requestMyPublicaddressLabelTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("request.myPublicaddress.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Menge
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func sendAmountTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("send.amount.textField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Mit Freunden teilen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func settingsShareWithFriendsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.shareWithFriends.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Mit Touch ID anmelden
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func lockEnterPasscodeViewModelTouchId(_: Void = ()) -> String {
        return NSLocalizedString("lock.enter.passcode.view.model.touch.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Mnemonisch
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func mnemonic(_: Void = ()) -> String {
        return NSLocalizedString("Mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Name
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static func name(_: Void = ()) -> String {
        return NSLocalizedString("Name", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Netzwerk
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsNetworkButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Netzwerkgebühr
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func confirmPaymentGasFeeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.gasFee.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Neu
      /// 
      /// Locales: de, zh-Hans, ja, en, ru
      static func new(_: Void = ()) -> String {
        return NSLocalizedString("New", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Neu laden
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func browserReloadButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.reload.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Nicht wieder anzeigen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static func settingsNetworkTestWarnningDontShowAgain(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.test.warnning.dont.show.again", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Noch keine Lesezeichen!
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static func bookmarksNoBookmarksLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("bookmarks.noBookmarks.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Noch keine Transaktionen!
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func transactionsNoTransactionsLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.noTransactions.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Noch keine Transaktionen!
      /// 
      /// Locales: de, zh-Hans, ja, en, ru
      static func historyNoHistoryLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("history.noHistory.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Nonce
      /// 
      /// Locales: de, zh-Hans, ja, en
      static func configureTransactionNonceLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.nonce.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Nächster
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("Next", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: OK
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func oK(_: Void = ()) -> String {
        return NSLocalizedString("OK", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Open-Source-Entwicklung
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsOpenSourceDevelopmentLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.openSourceDevelopment.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: PIN / Biometrie
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsBiometricsDisabledLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.biometricsDisabled.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: PIN einrichten
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func lockCreatePasscodeViewModelTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.create.passcode.view.model.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Passwort
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Passwort
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static func enterPasswordPasswordTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.password.textField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Passwort / %@
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsBiometricsEnabledLabelTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("settings.biometricsEnabled.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Passwort bestätigen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func enterPasswordConfirmPasswordTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.confirmPassword.textField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Passwörter stimmen nicht überein!
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func enterPasswordPasswordNoMatchError(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.passwordNoMatch.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Privat und sicher
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomePrivateAndSecureLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.privateAndSecure.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Private Schlüssel verlassen Ihr Gerät nie.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomePrivateAndSecureLabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("welcome.privateAndSecure.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Privaten Schlüssel exportieren
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func exportPrivateKeyNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.privateKey.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Privaten Schlüssel exportieren
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func walletsExportAlertSheetTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallets.export.alertSheet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Privater Schlüssel
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func privateKey(_: Void = ()) -> String {
        return NSLocalizedString("Private Key", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Probieren Sie Trust aus - die Wallet, in der ich meine Ethereum und ERC20-Token sicher aufbewahren kann.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func welldoneViewmodelSharingText2(_: Void = ()) -> String {
        return NSLocalizedString("welldone.viewmodel.sharing.text2", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Push-Benachrichtigungen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsPushNotificationsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Push-Benachrichtigungen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsPushNotificationsTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Push-Benachrichtigungen zulassen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsAllowPushNotificationsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.allowPushNotifications.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: QR-Code generieren
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func exportQrCodeLoadingLabel(_: Void = ()) -> String {
        return NSLocalizedString("export.qrCode.loading.label", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: QR-Code-Leser
      /// 
      /// Locales: de, zh-Hans, ja, en
      static func browserQrCodeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.qrCode.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Quellcode
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsSourceCodeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.sourceCode.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: RayboWallet unterstützt standardmäßig ERC20-Tokens.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomeErc20LabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("welcome.erc20.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Sammlerstücke
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func collectibles(_: Void = ()) -> String {
        return NSLocalizedString("Collectibles", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Schreiben Sie diesen Satz auf und bewahren Sie es privat und sicher auf. Sie können Ihre Wallet nicht wiederherstellen, wenn Sie diesen verlieren!
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func passphraseRememberLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("passphrase.remember.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Schreiben Sie uns eine E-Mail
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsEmailUsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.emailUs.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Schreiben Sie uns eine Email (Lies zuerst die FAQ)
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsEmailUsReadFAQButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.emailUsReadFAQ.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Senden
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func send(_: Void = ()) -> String {
        return NSLocalizedString("Send", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Sicherheit
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsSecurityLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.security.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Sicherungsschlüsselspeicher
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func walletsBackupAlertSheetTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallets.backup.alertSheet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Sie haben noch keine Tokens erhalten!
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func emptyViewNoTokensLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("emptyView.noTokens.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Sie wechseln in ein Testnetz, in dem Transaktionen nur zu Testzwecken durchgeführt werden.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static func settingsNetworkTestWarnningMessage(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.test.warnning.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Sie werden über gesendete und empfangene Transaktionen benachrichtigt.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsPushNotificationsAllowPushNotificationsFooter(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.allowPushNotifications.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Sind Sie sicher, dass Sie diese Wallet löschen möchten?
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func accountsConfirmDeleteTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.confirm.delete.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Sind Sie sicher, dass Sie dieses Lesezeichen löschen möchten?
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func browserBookmarksConfirmDeleteTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.bookmarks.confirm.delete.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Spenden
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsDonateButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.donate.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Stellen Sie sicher, dass Sie ein Backup Ihrer Wallet erstellt haben.
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func accountsConfirmDeleteMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.confirm.delete.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Suchen oder geben Sie die URL der Website ein
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func browserUrlTextfieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("browser.url.textfield.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Support
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsSupportLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.support.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Support
      /// 
      /// Locales: de, zh-Hans, ja, en, vi, th
      static func settingsSupportTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.support.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Symbol
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func symbol(_: Void = ()) -> String {
        return NSLocalizedString("Symbol", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Teilen
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func browserShareButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.share.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Teilen
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func welldoneShareLabelText(_: Void = ()) -> String {
        return NSLocalizedString("welldone.share.label.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Test
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func settingsNetworkTestLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.test.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Tokens
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func tokens(_: Void = ()) -> String {
        return NSLocalizedString("Tokens", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Tokens
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func tokensNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Tokens
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func tokensTabbarItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.tabbar.item.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Tokens erscheinen automatisch. Drücke "+", um Tokens manuell hinzuzufügen.
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func tokensFooterLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.footer.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Tokens suchen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func editTokensSearchBarPlaceholderTitle(_: Void = ()) -> String {
        return NSLocalizedString("editTokens.searchBar.placeholder.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Transaktion #
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func transactionIdLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.id.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Transaktion gesendet!
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static func sentTransactionTitle(_: Void = ()) -> String {
        return NSLocalizedString("sent.transaction.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Transaktionen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func transactionsTabbarItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.tabbar.item.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Transaktions-ID kopieren
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func sendActionCopyTransactionTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.action.copy.transaction.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Transaktionsdaten (optional)
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func configureTransactionDataLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.data.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Transaktionszeit
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static func transactionTimeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.time.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Trust Feedback
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsFeedbackEmailTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.feedback.email.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Unbekannt
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func transactionCellUnknownTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.unknown.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Ungültige Adresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func sendErrorInvalidAddress(_: Void = ()) -> String {
        return NSLocalizedString("send.error.invalidAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Ungültige Menge
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func sendErrorInvalidAmount(_: Void = ()) -> String {
        return NSLocalizedString("send.error.invalidAmount", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Verlauf
      /// 
      /// Locales: de, zh-Hans, ja, en, ru
      static func history(_: Void = ()) -> String {
        return NSLocalizedString("History", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Version
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsVersionLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.version.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Versuchen Sie es in 1 Minute erneut
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static func lockEnterPasscodeViewModelTryAfterOneMinute(_: Void = ()) -> String {
        return NSLocalizedString("lock.enter.passcode.view.model.try.after.one.minute", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Vertragsadresse
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func contractTrustCoreAddress(_: Void = ()) -> String {
        return NSLocalizedString("Contract TrustCore.Address", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Vielen Dank!
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi, th
      static func welldoneNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("welldone.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Von
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func confirmPaymentFromLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.from.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Von
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func transactionFromLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.from.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Völlig transparent
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomeFullyTransparentLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.fullyTransparent.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: WALLET ERSTELLEN
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomeCreateWalletButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.createWallet.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: WALLET IMPORTIEREN
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func welcomeImportWalletButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.importWallet.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wallet
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func walletNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wallet importieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func importNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("import.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wallet sichern
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func exportBackupButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.backup.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wallet wird importiert...
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func importWalletImportingIndicatorLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("importWallet.importingIndicator.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wallet-Optionen importieren
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func importWalletImportAlertSheetTitle(_: Void = ()) -> String {
        return NSLocalizedString("importWallet.import.alertSheet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wallets
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsWalletsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.wallets.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wallets
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static func walletsNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallets.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Warnung
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static func settingsNetworkTestWarnningTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.test.warnning.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wiederherstellungssatz
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, pt-BR, vi
      static func recoveryPhraseNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("recoveryPhrase.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wiederholen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func retry(_: Void = ()) -> String {
        return NSLocalizedString("Retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wird bearbeitet...
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, fr
      static func transactionCellPendingTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.pending.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wird empfangen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func transactionCellReceivingTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.receiving.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wird geladen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func loading(_ value1: String) -> String {
        return String(format: NSLocalizedString("Loading", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: Wird gesendet
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr, th
      static func transactionCellSendingTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.sending.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wo möchten Sie kaufen?
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func depositBuyLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("deposit.buy.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Währung
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func settingsCurrencyButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.currency.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wörter getrennt durch ein Leerzeichen. (Enthält normalerweise 12 Wörter)
      /// 
      /// Locales: de, zh-Hans, ja, en, vi
      static func importWalletMnemonicPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("import.wallet.mnemonic.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Zeige Tokens beim Start der App
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi
      static func settingsPreferencesButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Zur Startseite
      /// 
      /// Locales: de, zh-Hans, ja, en, zh-Hant, vi, th
      static func browserHomeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.home.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: ermöglicht durch OpenSea
      /// 
      /// Locales: de, zh-Hans, ja, en
      static func nftPoweredByLabelText(_: Void = ()) -> String {
        return NSLocalizedString("nft.poweredBy.label.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: iCloud / Dropbox / Google Drive
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func importWalletImportAlertSheetOptionTitle(_: Void = ()) -> String {
        return NSLocalizedString("importWallet.import.alertSheet.option.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Überspringen
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func exportSkipButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.skip.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Übertragen %@
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func transactionCellTokenTransferTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction.cell.tokenTransfer.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// de translation: über Changelly
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func depositBuyButtonChangellyTitle(_: Void = ()) -> String {
        return NSLocalizedString("deposit.buy.button.changelly.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: über Coinbase
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func depositBuyButtonCoinbaseTitle(_: Void = ()) -> String {
        return NSLocalizedString("deposit.buy.button.coinbase.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: über ShapeShift (nur Kryptowährungen)
      /// 
      /// Locales: de, ar, zh-Hans, ja, en, es, it, zh-Hant, pt-BR, vi, ru, fr
      static func depositBuyButtonShapeShiftTitle(_: Void = ()) -> String {
        return NSLocalizedString("deposit.buy.button.shapeShift.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Data (Optional). %@
      /// 
      /// Locales: en
      static func configureTransactionDataFieldLabelTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("configureTransaction.dataField.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Nonce
      /// 
      /// Locales: en
      static func nonce(_: Void = ()) -> String {
        return NSLocalizedString("Nonce", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient
      /// 
      /// Locales: en
      static func transactionRecipientLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.recipient.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sender
      /// 
      /// Locales: en
      static func transactionSenderLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.sender.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: Gas 费用太高，最大可用：%1$@ %2$@
      /// 
      /// Locales: zh-Hans, ja, en, vi, th
      static func configureTransactionErrorGasFeeHigh(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("configureTransaction.error.gasFeeHigh", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// zh-Hans translation: 禁用
      /// 
      /// Locales: zh-Hans, ja, en, zh-Hant, vi, ru, fr, th
      static func disable(_: Void = ()) -> String {
        return NSLocalizedString("Disable", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.tron` struct is generated, and contains static references to 122 localization keys.
    struct tron {
      /// en translation: Account
      /// 
      /// Locales: en, zh-Hans
      static let tokenPopViewAccountLabelTitle = Rswift.StringResource(key: "Token.PopView.account.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account
      /// 
      /// Locales: en, zh-Hans
      static let votePopViewAccountLabelTitle = Rswift.StringResource(key: "Vote.PopView.account.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account address
      /// 
      /// Locales: en, zh-Hans
      static let createAddressLabelTitle = Rswift.StringResource(key: "Create.address.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address 
      /// 
      /// Locales: en, zh-Hans
      static let voteAddressLabelTitle = Rswift.StringResource(key: "Vote.address.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static let tokenPopViewAmountLabelTitle = Rswift.StringResource(key: "Token.PopView.amount.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Are you sure you want to change node？
      /// 
      /// Locales: en, zh-Hans
      static let alertChangeNodeTitle = Rswift.StringResource(key: "Alert.changeNode.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Are you sure you want to unfreeze TRX？
      /// 
      /// Locales: en, zh-Hans
      static let alertUnFreezeTitle = Rswift.StringResource(key: "Alert.UnFreeze.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backup
      /// 
      /// Locales: en, zh-Hans
      static let backupBackupButtonTitle = Rswift.StringResource(key: "Backup.backup.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backup
      /// 
      /// Locales: en, zh-Hans
      static let walletsBackupActionsheetTitle = Rswift.StringResource(key: "Wallets.backup.actionsheet.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backups
      /// 
      /// Locales: en, zh-Hans
      static let backupTipTitleLabelTitle = Rswift.StringResource(key: "Backup.tipTitle.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static let balanceNavTitle = Rswift.StringResource(key: "Balance.nav.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: BandWidth
      /// 
      /// Locales: en, zh-Hans
      static let balanceBandwidthLabelTitle = Rswift.StringResource(key: "Balance.bandwidth.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bindwidth not enough
      /// 
      /// Locales: en, zh-Hans
      static let errorBandwidth = Rswift.StringResource(key: "Error.Bandwidth", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let alertChangeNodeCancel = Rswift.StringResource(key: "Alert.changeNode.cancel", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let alertUnFreezeCancel = Rswift.StringResource(key: "Alert.UnFreeze.cancel", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let navButtonCancel = Rswift.StringResource(key: "Nav.Button.cancel", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cold Wallet Help
      /// 
      /// Locales: en, zh-Hans
      static let coldWalletSetColdwallet = Rswift.StringResource(key: "ColdWallet.Set.coldwallet", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cold Wallet(click show detail)
      /// 
      /// Locales: en, zh-Hans
      static let coldWalletColdTitle = Rswift.StringResource(key: "ColdWallet.cold.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Complete
      /// 
      /// Locales: en, zh-Hans
      static let navButtonComplete = Rswift.StringResource(key: "Nav.Button.complete", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let balanceSendConfirmButtonConfirm = Rswift.StringResource(key: "Balance.Send.Confirm.button.confirm", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let votePopViewComfirmButtonTitle = Rswift.StringResource(key: "Vote.PopView.comfirm.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Contract export error
      /// 
      /// Locales: en, zh-Hans
      static let errorContractExe = Rswift.StringResource(key: "Error.ContractExe", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Contract validation error
      /// 
      /// Locales: en, zh-Hans
      static let errorContractValidate = Rswift.StringResource(key: "Error.ContractValidate", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static let balanceReceiveButtonCopy = Rswift.StringResource(key: "Balance.Receive.buttonCopy", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static let createCopyButtonTitle = Rswift.StringResource(key: "Create.copy.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy Address
      /// 
      /// Locales: en, zh-Hans
      static let walletsAddressActionsheetTitle = Rswift.StringResource(key: "Wallets.address.actionsheet.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy Success
      /// 
      /// Locales: en, zh-Hans
      static let hudCopysuccess = Rswift.StringResource(key: "HUD.copysuccess", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Wallet
      /// 
      /// Locales: en, zh-Hans
      static let createCreateButtonTitle = Rswift.StringResource(key: "Create.create.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Wallet
      /// 
      /// Locales: en, zh-Hans
      static let loginCreateButtonTitle = Rswift.StringResource(key: "Login.create.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en, zh-Hans
      static let walletsDeleteButtonTitle = Rswift.StringResource(key: "Wallets.delete.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Description
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenDescriptionLabelTitle = Rswift.StringResource(key: "IssueToken.description.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Details
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenDetailsLabelTitle = Rswift.StringResource(key: "IssueToken.details.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: End time
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenEndtimeLabelTitle = Rswift.StringResource(key: "IssueToken.endtime.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter a number
      /// 
      /// Locales: en, zh-Hans
      static let votePopViewInputTitle = Rswift.StringResource(key: "Vote.PopView.input.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter the number of
      /// 
      /// Locales: en, zh-Hans
      static let tokenPopViewInputTitle = Rswift.StringResource(key: "Token.PopView.input.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Export
      /// 
      /// Locales: en, zh-Hans
      static let walletsExportButtonTitle = Rswift.StringResource(key: "Wallets.export.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Export Private Key
      /// 
      /// Locales: en, zh-Hans
      static let walletsPrivatekeyActionsheetTitle = Rswift.StringResource(key: "Wallets.privatekey.actionsheet.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Failed
      /// 
      /// Locales: en, zh-Hans
      static let hudFailed = Rswift.StringResource(key: "HUD.failed", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Finished
      /// 
      /// Locales: en, zh-Hans
      static let tokenFinishedButtonTitle = Rswift.StringResource(key: "Token.finished.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Freeze
      /// 
      /// Locales: en, zh-Hans
      static let balancePowerLabelTitle = Rswift.StringResource(key: "Balance.power.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Freeze Balance
      /// 
      /// Locales: en, zh-Hans
      static let balanceFreezePopViewFreezeButtonTitle = Rswift.StringResource(key: "Balance.FreezePopView.freeze.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Freeze Balance
      /// 
      /// Locales: en, zh-Hans
      static let balanceFreezePopViewTitle = Rswift.StringResource(key: "Balance.FreezePopView.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: From
      /// 
      /// Locales: en, zh-Hans
      static let transactionFromLabelTitle = Rswift.StringResource(key: "Transaction.from.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Frozen amount
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenFrozenamountLabelTitle = Rswift.StringResource(key: "IssueToken.frozenamount.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Frozen days
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenFrozendaysLabelTitle = Rswift.StringResource(key: "IssueToken.frozendays.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: How to use cold wallet
      /// 
      /// Locales: en, zh-Hans
      static let settingColdwalletTitle = Rswift.StringResource(key: "Setting.coldwallet.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I coinfirm to freeze TRX for at least of 3 days
      /// 
      /// Locales: en, zh-Hans
      static let balanceFreezePopViewConfirmtipLabelTitle = Rswift.StringResource(key: "Balance.FreezePopView.confirmtip.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I confirm that creating the total supply of the token costs one time total fee of 1024 TRX
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenConfirmtipCheckboxTitle = Rswift.StringResource(key: "IssueToken.confirmtip.checkbox.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I understand that if I forget/lose my password I will never be able to access my assets.
      /// 
      /// Locales: en, zh-Hans
      static let createCheckboxTip1LabelTitle = Rswift.StringResource(key: "Create.checkbox.tip1.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I understand that if I forget/lose my password no one will be able to help me recover it.
      /// 
      /// Locales: en, zh-Hans
      static let createCheckboxTip2LabelTitle = Rswift.StringResource(key: "Create.checkbox.tip2.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I've written my password on paper.
      /// 
      /// Locales: en, zh-Hans
      static let createCheckboxTip3LabelTitle = Rswift.StringResource(key: "Create.checkbox.tip3.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import Wallet
      /// 
      /// Locales: en, zh-Hans
      static let loginImportButtonTitle = Rswift.StringResource(key: "Login.import.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Issue a Token
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenIssueButtonTitle = Rswift.StringResource(key: "IssueToken.issue.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Issue a Token
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenNavTitle = Rswift.StringResource(key: "IssueToken.nav.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Issuer
      /// 
      /// Locales: en, zh-Hans
      static let tokenIssuerLabelTitle = Rswift.StringResource(key: "Token.issuer.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Make sure copy your wallet address and paste it safely. Or you can write it down on the paper and keep it well
      /// 
      /// Locales: en, zh-Hans
      static let createAddressTipLabelTitle = Rswift.StringResource(key: "Create.address.tip.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My Public RayboWallet Address
      /// 
      /// Locales: en, zh-Hans
      static let balanceReceiveAddressTip = Rswift.StringResource(key: "Balance.Receive.addressTip", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network Connected,Become Hot Wallet
      /// 
      /// Locales: en, zh-Hans
      static let networkAvailableHud = Rswift.StringResource(key: "Network.available.hud", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network Disconnected,Become Cold Wallet
      /// 
      /// Locales: en, zh-Hans
      static let networkUnavailableHud = Rswift.StringResource(key: "Network.unavailable.hud", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, zh-Hans
      static let balanceSendNextButtonTitle = Rswift.StringResource(key: "Balance.Send.next.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No Transactions
      /// 
      /// Locales: en, zh-Hans
      static let transactionEmptyTip = Rswift.StringResource(key: "Transaction.empty.tip", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Node
      /// 
      /// Locales: en, zh-Hans
      static let settingNodeTitle = Rswift.StringResource(key: "Setting.node.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Node List
      /// 
      /// Locales: en, zh-Hans
      static let settingNodelistNavTitle = Rswift.StringResource(key: "Setting.Nodelist.nav.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Not start
      /// 
      /// Locales: en, zh-Hans
      static let tokenNotstartButtonTitle = Rswift.StringResource(key: "Token.notstart.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static let errorUnFreezeOk = Rswift.StringResource(key: "Error.UnFreeze.ok", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Only if you can control your assets and prevent them from losing because of application deletion, you need to backup keystore.
      /// 
      /// Locales: en, zh-Hans
      static let backupTip1LabelTitle = Rswift.StringResource(key: "Backup.tip1.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Only if you can control your assets and prevent them from losing because of application deletion, you need to backup keystore.
      /// 
      /// Locales: en, zh-Hans
      static let backupTip2LabelTitle = Rswift.StringResource(key: "Backup.tip2.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Other errors
      /// 
      /// Locales: en, zh-Hans
      static let errorOther = Rswift.StringResource(key: "Error.Other", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Participate
      /// 
      /// Locales: en, zh-Hans
      static let tokenParticipateButtonTitle = Rswift.StringResource(key: "Token.participate.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Paste
      /// 
      /// Locales: en, zh-Hans
      static let balanceSendPasteButtonTitle = Rswift.StringResource(key: "Balance.Send.paste.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Paste
      /// 
      /// Locales: en, zh-Hans
      static let createPasteButtonTitle = Rswift.StringResource(key: "Create.paste.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Private Key
      /// 
      /// Locales: en, zh-Hans
      static let createPasswordLabelTitle = Rswift.StringResource(key: "Create.password.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static let balanceButtonReceive = Rswift.StringResource(key: "Balance.button.receive", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Receiving Address
      /// 
      /// Locales: en, zh-Hans
      static let balanceSendAddressLabelTitle = Rswift.StringResource(key: "Balance.Send.address.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Repeat Private Key
      /// 
      /// Locales: en, zh-Hans
      static let createRepasswordLabelTitle = Rswift.StringResource(key: "Create.repassword.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Repeated transactions
      /// 
      /// Locales: en, zh-Hans
      static let errorDupTransaction = Rswift.StringResource(key: "Error.DupTransaction", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reset to default
      /// 
      /// Locales: en, zh-Hans
      static let settingNodelistNavResetbuttonTitle = Rswift.StringResource(key: "Setting.Nodelist.nav.resetbutton.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Security
      /// 
      /// Locales: en, zh-Hans
      static let settingSecionPasswordTitle = Rswift.StringResource(key: "Setting.secion.password.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static let balanceButtonSend = Rswift.StringResource(key: "Balance.button.send", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sender
      /// 
      /// Locales: en, zh-Hans
      static let balanceSendConfirmSender = Rswift.StringResource(key: "Balance.Send.Confirm.sender", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let settingNavTitle = Rswift.StringResource(key: "Setting.nav.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share
      /// 
      /// Locales: en, zh-Hans
      static let settingShareTitle = Rswift.StringResource(key: "Setting.share.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sign Transaction
      /// 
      /// Locales: en, zh-Hans
      static let coldWalletSignTitle = Rswift.StringResource(key: "ColdWallet.sign.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Signature Error
      /// 
      /// Locales: en, zh-Hans
      static let errorSig = Rswift.StringResource(key: "Error.sig", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Specify the price of a single token by defining how many tokens a participant will receive for every TRX they spend.  Participants will receive Token for every 1 TRX.
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenTipLabelTitle = Rswift.StringResource(key: "IssueToken.tip.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Start time
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenStarttimeLabelTitle = Rswift.StringResource(key: "IssueToken.starttime.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Submit
      /// 
      /// Locales: en, zh-Hans
      static let tokenPopViewSubmitButtonTitle = Rswift.StringResource(key: "Token.PopView.submit.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Success
      /// 
      /// Locales: en, zh-Hans
      static let hudSuccess = Rswift.StringResource(key: "HUD.success", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Support us
      /// 
      /// Locales: en, zh-Hans
      static let settingSecionShareTitle = Rswift.StringResource(key: "Setting.secion.share.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sure
      /// 
      /// Locales: en, zh-Hans
      static let alertChangeNodeSure = Rswift.StringResource(key: "Alert.changeNode.sure", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: TRX Amount
      /// 
      /// Locales: en, zh-Hans
      static let balanceFreezePopViewAmountLabelTitle = Rswift.StringResource(key: "Balance.FreezePopView.amount.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: TRX amount
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenTrxamountLabelTitle = Rswift.StringResource(key: "IssueToken.trxamount.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The number of
      /// 
      /// Locales: en, zh-Hans
      static let balanceSendNumberLabelTitle = Rswift.StringResource(key: "Balance.Send.number.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The server is busy
      /// 
      /// Locales: en, zh-Hans
      static let errorServerBusy = Rswift.StringResource(key: "Error.ServerBusy", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The transaction amount is too large
      /// 
      /// Locales: en, zh-Hans
      static let errorTooBigTransaction = Rswift.StringResource(key: "Error.TooBigTransaction", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static let balanceSendConfirmTo = Rswift.StringResource(key: "Balance.Send.Confirm.to", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static let transactionToLabelTitle = Rswift.StringResource(key: "Transaction.to.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token
      /// 
      /// Locales: en, zh-Hans
      static let tokenNavTitle = Rswift.StringResource(key: "Token.nav.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token amount
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenTokenamountLabelTitle = Rswift.StringResource(key: "IssueToken.tokenamount.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token name
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenIssueatokenLabelTitle = Rswift.StringResource(key: "IssueToken.issueatoken.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token name
      /// 
      /// Locales: en, zh-Hans
      static let tokenNameLabelTitle = Rswift.StringResource(key: "Token.name.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total
      /// 
      /// Locales: en, zh-Hans
      static let balanceSendConfirmTotal = Rswift.StringResource(key: "Balance.Send.Confirm.total", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total supply
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenTotalsupplyLabelTitle = Rswift.StringResource(key: "IssueToken.totalsupply.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total supply
      /// 
      /// Locales: en, zh-Hans
      static let tokenTotalsupplyLabelTitle = Rswift.StringResource(key: "Token.totalsupply.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction error
      /// 
      /// Locales: en, zh-Hans
      static let errorTapos = Rswift.StringResource(key: "Error.Tapos", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction expires
      /// 
      /// Locales: en, zh-Hans
      static let errorTransactionExpiration = Rswift.StringResource(key: "Error.TransactionExpiration", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transactions
      /// 
      /// Locales: en, zh-Hans
      static let transactionNavTitle = Rswift.StringResource(key: "Transaction.nav.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: URL
      /// 
      /// Locales: en, zh-Hans
      static let issueTokenUrlLabelTitle = Rswift.StringResource(key: "IssueToken.url.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unable to unfreeze
      /// 
      /// Locales: en, zh-Hans
      static let errorUnFreezeTitle = Rswift.StringResource(key: "Error.UnFreeze.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unable to unfreeze TRX. This could be caused because the minimal freeze period hasn't been reached yet.
      /// 
      /// Locales: en, zh-Hans
      static let errorUnFreezeMessage = Rswift.StringResource(key: "Error.UnFreeze.message", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unavailable in this wallet mode
      /// 
      /// Locales: en, zh-Hans
      static let coldWalletFobidHud = Rswift.StringResource(key: "ColdWallet.fobid.hud", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unfreeze
      /// 
      /// Locales: en, zh-Hans
      static let alertUnFreezeSure = Rswift.StringResource(key: "Alert.UnFreeze.sure", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unfreeze
      /// 
      /// Locales: en, zh-Hans
      static let balanceFreezeLabelTitle = Rswift.StringResource(key: "Balance.freeze.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static let settingVersionTitle = Rswift.StringResource(key: "Setting.version.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static let voteButtonTitle = Rswift.StringResource(key: "Vote.button.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static let voteNavTitle = Rswift.StringResource(key: "Vote.nav.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static let voteVoteLabelTitle = Rswift.StringResource(key: "Vote.vote.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallets
      /// 
      /// Locales: en, zh-Hans
      static let settingWalletsTitle = Rswift.StringResource(key: "Setting.wallets.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallets
      /// 
      /// Locales: en, zh-Hans
      static let walletsNavTitle = Rswift.StringResource(key: "Wallets.nav.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Watch Wallet(click show detail)
      /// 
      /// Locales: en, zh-Hans
      static let coldWalletWatchTitle = Rswift.StringResource(key: "ColdWallet.watch.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your Vote
      /// 
      /// Locales: en, zh-Hans
      static let voteYourvoteLabelTitle = Rswift.StringResource(key: "Vote.yourvote.label.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: password/touch ID
      /// 
      /// Locales: en, zh-Hans
      static let settingPasswordTouchIDTitle = Rswift.StringResource(key: "Setting.password/touchID.title", tableName: "Tron", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation: Account
      /// 
      /// Locales: en, zh-Hans
      static func tokenPopViewAccountLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.PopView.account.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account
      /// 
      /// Locales: en, zh-Hans
      static func votePopViewAccountLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vote.PopView.account.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account address
      /// 
      /// Locales: en, zh-Hans
      static func createAddressLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.address.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address 
      /// 
      /// Locales: en, zh-Hans
      static func voteAddressLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vote.address.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static func tokenPopViewAmountLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.PopView.amount.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to change node？
      /// 
      /// Locales: en, zh-Hans
      static func alertChangeNodeTitle(_: Void = ()) -> String {
        return NSLocalizedString("Alert.changeNode.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to unfreeze TRX？
      /// 
      /// Locales: en, zh-Hans
      static func alertUnFreezeTitle(_: Void = ()) -> String {
        return NSLocalizedString("Alert.UnFreeze.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup
      /// 
      /// Locales: en, zh-Hans
      static func backupBackupButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Backup.backup.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup
      /// 
      /// Locales: en, zh-Hans
      static func walletsBackupActionsheetTitle(_: Void = ()) -> String {
        return NSLocalizedString("Wallets.backup.actionsheet.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backups
      /// 
      /// Locales: en, zh-Hans
      static func backupTipTitleLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Backup.tipTitle.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static func balanceNavTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.nav.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BandWidth
      /// 
      /// Locales: en, zh-Hans
      static func balanceBandwidthLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.bandwidth.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bindwidth not enough
      /// 
      /// Locales: en, zh-Hans
      static func errorBandwidth(_: Void = ()) -> String {
        return NSLocalizedString("Error.Bandwidth", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func alertChangeNodeCancel(_: Void = ()) -> String {
        return NSLocalizedString("Alert.changeNode.cancel", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func alertUnFreezeCancel(_: Void = ()) -> String {
        return NSLocalizedString("Alert.UnFreeze.cancel", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func navButtonCancel(_: Void = ()) -> String {
        return NSLocalizedString("Nav.Button.cancel", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cold Wallet Help
      /// 
      /// Locales: en, zh-Hans
      static func coldWalletSetColdwallet(_: Void = ()) -> String {
        return NSLocalizedString("ColdWallet.Set.coldwallet", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cold Wallet(click show detail)
      /// 
      /// Locales: en, zh-Hans
      static func coldWalletColdTitle(_: Void = ()) -> String {
        return NSLocalizedString("ColdWallet.cold.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Complete
      /// 
      /// Locales: en, zh-Hans
      static func navButtonComplete(_: Void = ()) -> String {
        return NSLocalizedString("Nav.Button.complete", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func balanceSendConfirmButtonConfirm(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Send.Confirm.button.confirm", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func votePopViewComfirmButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vote.PopView.comfirm.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contract export error
      /// 
      /// Locales: en, zh-Hans
      static func errorContractExe(_: Void = ()) -> String {
        return NSLocalizedString("Error.ContractExe", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contract validation error
      /// 
      /// Locales: en, zh-Hans
      static func errorContractValidate(_: Void = ()) -> String {
        return NSLocalizedString("Error.ContractValidate", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static func balanceReceiveButtonCopy(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Receive.buttonCopy", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static func createCopyButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.copy.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy Address
      /// 
      /// Locales: en, zh-Hans
      static func walletsAddressActionsheetTitle(_: Void = ()) -> String {
        return NSLocalizedString("Wallets.address.actionsheet.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy Success
      /// 
      /// Locales: en, zh-Hans
      static func hudCopysuccess(_: Void = ()) -> String {
        return NSLocalizedString("HUD.copysuccess", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Wallet
      /// 
      /// Locales: en, zh-Hans
      static func createCreateButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.create.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Wallet
      /// 
      /// Locales: en, zh-Hans
      static func loginCreateButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Login.create.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en, zh-Hans
      static func walletsDeleteButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Wallets.delete.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Description
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenDescriptionLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.description.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Details
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenDetailsLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.details.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: End time
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenEndtimeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.endtime.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter a number
      /// 
      /// Locales: en, zh-Hans
      static func votePopViewInputTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vote.PopView.input.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter the number of
      /// 
      /// Locales: en, zh-Hans
      static func tokenPopViewInputTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.PopView.input.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export
      /// 
      /// Locales: en, zh-Hans
      static func walletsExportButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Wallets.export.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export Private Key
      /// 
      /// Locales: en, zh-Hans
      static func walletsPrivatekeyActionsheetTitle(_: Void = ()) -> String {
        return NSLocalizedString("Wallets.privatekey.actionsheet.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed
      /// 
      /// Locales: en, zh-Hans
      static func hudFailed(_: Void = ()) -> String {
        return NSLocalizedString("HUD.failed", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Finished
      /// 
      /// Locales: en, zh-Hans
      static func tokenFinishedButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.finished.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Freeze
      /// 
      /// Locales: en, zh-Hans
      static func balancePowerLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.power.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Freeze Balance
      /// 
      /// Locales: en, zh-Hans
      static func balanceFreezePopViewFreezeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.FreezePopView.freeze.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Freeze Balance
      /// 
      /// Locales: en, zh-Hans
      static func balanceFreezePopViewTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.FreezePopView.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: From
      /// 
      /// Locales: en, zh-Hans
      static func transactionFromLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Transaction.from.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Frozen amount
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenFrozenamountLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.frozenamount.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Frozen days
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenFrozendaysLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.frozendays.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How to use cold wallet
      /// 
      /// Locales: en, zh-Hans
      static func settingColdwalletTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.coldwallet.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I coinfirm to freeze TRX for at least of 3 days
      /// 
      /// Locales: en, zh-Hans
      static func balanceFreezePopViewConfirmtipLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.FreezePopView.confirmtip.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I confirm that creating the total supply of the token costs one time total fee of 1024 TRX
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenConfirmtipCheckboxTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.confirmtip.checkbox.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I understand that if I forget/lose my password I will never be able to access my assets.
      /// 
      /// Locales: en, zh-Hans
      static func createCheckboxTip1LabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.checkbox.tip1.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I understand that if I forget/lose my password no one will be able to help me recover it.
      /// 
      /// Locales: en, zh-Hans
      static func createCheckboxTip2LabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.checkbox.tip2.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I've written my password on paper.
      /// 
      /// Locales: en, zh-Hans
      static func createCheckboxTip3LabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.checkbox.tip3.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import Wallet
      /// 
      /// Locales: en, zh-Hans
      static func loginImportButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Login.import.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Issue a Token
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenIssueButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.issue.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Issue a Token
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenNavTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.nav.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Issuer
      /// 
      /// Locales: en, zh-Hans
      static func tokenIssuerLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.issuer.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Make sure copy your wallet address and paste it safely. Or you can write it down on the paper and keep it well
      /// 
      /// Locales: en, zh-Hans
      static func createAddressTipLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.address.tip.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Public RayboWallet Address
      /// 
      /// Locales: en, zh-Hans
      static func balanceReceiveAddressTip(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Receive.addressTip", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Network Connected,Become Hot Wallet
      /// 
      /// Locales: en, zh-Hans
      static func networkAvailableHud(_: Void = ()) -> String {
        return NSLocalizedString("Network.available.hud", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Network Disconnected,Become Cold Wallet
      /// 
      /// Locales: en, zh-Hans
      static func networkUnavailableHud(_: Void = ()) -> String {
        return NSLocalizedString("Network.unavailable.hud", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, zh-Hans
      static func balanceSendNextButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Send.next.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No Transactions
      /// 
      /// Locales: en, zh-Hans
      static func transactionEmptyTip(_: Void = ()) -> String {
        return NSLocalizedString("Transaction.empty.tip", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Node
      /// 
      /// Locales: en, zh-Hans
      static func settingNodeTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.node.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Node List
      /// 
      /// Locales: en, zh-Hans
      static func settingNodelistNavTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.Nodelist.nav.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not start
      /// 
      /// Locales: en, zh-Hans
      static func tokenNotstartButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.notstart.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static func errorUnFreezeOk(_: Void = ()) -> String {
        return NSLocalizedString("Error.UnFreeze.ok", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Only if you can control your assets and prevent them from losing because of application deletion, you need to backup keystore.
      /// 
      /// Locales: en, zh-Hans
      static func backupTip1LabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Backup.tip1.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Only if you can control your assets and prevent them from losing because of application deletion, you need to backup keystore.
      /// 
      /// Locales: en, zh-Hans
      static func backupTip2LabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Backup.tip2.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Other errors
      /// 
      /// Locales: en, zh-Hans
      static func errorOther(_: Void = ()) -> String {
        return NSLocalizedString("Error.Other", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Participate
      /// 
      /// Locales: en, zh-Hans
      static func tokenParticipateButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.participate.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Paste
      /// 
      /// Locales: en, zh-Hans
      static func balanceSendPasteButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Send.paste.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Paste
      /// 
      /// Locales: en, zh-Hans
      static func createPasteButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.paste.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private Key
      /// 
      /// Locales: en, zh-Hans
      static func createPasswordLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.password.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static func balanceButtonReceive(_: Void = ()) -> String {
        return NSLocalizedString("Balance.button.receive", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receiving Address
      /// 
      /// Locales: en, zh-Hans
      static func balanceSendAddressLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Send.address.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repeat Private Key
      /// 
      /// Locales: en, zh-Hans
      static func createRepasswordLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Create.repassword.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repeated transactions
      /// 
      /// Locales: en, zh-Hans
      static func errorDupTransaction(_: Void = ()) -> String {
        return NSLocalizedString("Error.DupTransaction", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset to default
      /// 
      /// Locales: en, zh-Hans
      static func settingNodelistNavResetbuttonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.Nodelist.nav.resetbutton.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Security
      /// 
      /// Locales: en, zh-Hans
      static func settingSecionPasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.secion.password.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static func balanceButtonSend(_: Void = ()) -> String {
        return NSLocalizedString("Balance.button.send", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sender
      /// 
      /// Locales: en, zh-Hans
      static func balanceSendConfirmSender(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Send.Confirm.sender", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func settingNavTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.nav.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share
      /// 
      /// Locales: en, zh-Hans
      static func settingShareTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.share.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sign Transaction
      /// 
      /// Locales: en, zh-Hans
      static func coldWalletSignTitle(_: Void = ()) -> String {
        return NSLocalizedString("ColdWallet.sign.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Signature Error
      /// 
      /// Locales: en, zh-Hans
      static func errorSig(_: Void = ()) -> String {
        return NSLocalizedString("Error.sig", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Specify the price of a single token by defining how many tokens a participant will receive for every TRX they spend.  Participants will receive Token for every 1 TRX.
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenTipLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.tip.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Start time
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenStarttimeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.starttime.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit
      /// 
      /// Locales: en, zh-Hans
      static func tokenPopViewSubmitButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.PopView.submit.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Success
      /// 
      /// Locales: en, zh-Hans
      static func hudSuccess(_: Void = ()) -> String {
        return NSLocalizedString("HUD.success", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support us
      /// 
      /// Locales: en, zh-Hans
      static func settingSecionShareTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.secion.share.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sure
      /// 
      /// Locales: en, zh-Hans
      static func alertChangeNodeSure(_: Void = ()) -> String {
        return NSLocalizedString("Alert.changeNode.sure", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TRX Amount
      /// 
      /// Locales: en, zh-Hans
      static func balanceFreezePopViewAmountLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.FreezePopView.amount.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TRX amount
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenTrxamountLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.trxamount.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The number of
      /// 
      /// Locales: en, zh-Hans
      static func balanceSendNumberLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Send.number.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The server is busy
      /// 
      /// Locales: en, zh-Hans
      static func errorServerBusy(_: Void = ()) -> String {
        return NSLocalizedString("Error.ServerBusy", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The transaction amount is too large
      /// 
      /// Locales: en, zh-Hans
      static func errorTooBigTransaction(_: Void = ()) -> String {
        return NSLocalizedString("Error.TooBigTransaction", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static func balanceSendConfirmTo(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Send.Confirm.to", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static func transactionToLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Transaction.to.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token
      /// 
      /// Locales: en, zh-Hans
      static func tokenNavTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.nav.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token amount
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenTokenamountLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.tokenamount.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token name
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenIssueatokenLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.issueatoken.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token name
      /// 
      /// Locales: en, zh-Hans
      static func tokenNameLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.name.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total
      /// 
      /// Locales: en, zh-Hans
      static func balanceSendConfirmTotal(_: Void = ()) -> String {
        return NSLocalizedString("Balance.Send.Confirm.total", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total supply
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenTotalsupplyLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.totalsupply.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total supply
      /// 
      /// Locales: en, zh-Hans
      static func tokenTotalsupplyLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Token.totalsupply.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction error
      /// 
      /// Locales: en, zh-Hans
      static func errorTapos(_: Void = ()) -> String {
        return NSLocalizedString("Error.Tapos", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction expires
      /// 
      /// Locales: en, zh-Hans
      static func errorTransactionExpiration(_: Void = ()) -> String {
        return NSLocalizedString("Error.TransactionExpiration", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions
      /// 
      /// Locales: en, zh-Hans
      static func transactionNavTitle(_: Void = ()) -> String {
        return NSLocalizedString("Transaction.nav.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: URL
      /// 
      /// Locales: en, zh-Hans
      static func issueTokenUrlLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("IssueToken.url.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to unfreeze
      /// 
      /// Locales: en, zh-Hans
      static func errorUnFreezeTitle(_: Void = ()) -> String {
        return NSLocalizedString("Error.UnFreeze.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to unfreeze TRX. This could be caused because the minimal freeze period hasn't been reached yet.
      /// 
      /// Locales: en, zh-Hans
      static func errorUnFreezeMessage(_: Void = ()) -> String {
        return NSLocalizedString("Error.UnFreeze.message", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unavailable in this wallet mode
      /// 
      /// Locales: en, zh-Hans
      static func coldWalletFobidHud(_: Void = ()) -> String {
        return NSLocalizedString("ColdWallet.fobid.hud", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unfreeze
      /// 
      /// Locales: en, zh-Hans
      static func alertUnFreezeSure(_: Void = ()) -> String {
        return NSLocalizedString("Alert.UnFreeze.sure", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unfreeze
      /// 
      /// Locales: en, zh-Hans
      static func balanceFreezeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Balance.freeze.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static func settingVersionTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.version.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static func voteButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vote.button.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static func voteNavTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vote.nav.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static func voteVoteLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vote.vote.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallets
      /// 
      /// Locales: en, zh-Hans
      static func settingWalletsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.wallets.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallets
      /// 
      /// Locales: en, zh-Hans
      static func walletsNavTitle(_: Void = ()) -> String {
        return NSLocalizedString("Wallets.nav.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Watch Wallet(click show detail)
      /// 
      /// Locales: en, zh-Hans
      static func coldWalletWatchTitle(_: Void = ()) -> String {
        return NSLocalizedString("ColdWallet.watch.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your Vote
      /// 
      /// Locales: en, zh-Hans
      static func voteYourvoteLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("Vote.yourvote.label.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: password/touch ID
      /// 
      /// Locales: en, zh-Hans
      static func settingPasswordTouchIDTitle(_: Void = ()) -> String {
        return NSLocalizedString("Setting.password/touchID.title", tableName: "Tron", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AccountAssetTableViewCell.validate()
      try _AccountViewCell.validate()
      try _ColdTransactionView.validate()
      try _FrozenView.validate()
      try _SetSwitchTableViewCell.validate()
      try _SetTableViewCell.validate()
      try _SignedTransactionView.validate()
      try _TokenPurchaseView.validate()
      try _VoteInputView.validate()
      try _VoteTableViewCell.validate()
      try _WalletTableViewCell.validate()
    }
    
    struct _AccountAssetTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AccountAssetTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AccountAssetTableViewCell"
      let name = "AccountAssetTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountAssetTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountAssetTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_cell_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cell_arrow' is used in nib 'AccountAssetTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tron_otherasset_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tron_otherasset_icon' is used in nib 'AccountAssetTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AccountViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AccountViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AccountViewCell"
      let name = "AccountViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "glasses", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'glasses' is used in nib 'AccountViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AlerButtonBar: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AlerButtonBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ColdTransactionView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ColdTransactionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ColdTransactionView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColdTransactionView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_close' is used in nib 'ColdTransactionView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in nib 'ColdTransactionView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _EditTokenTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditTokenTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditTokenTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditTokenTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _FrozenView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FrozenView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FrozenView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FrozenView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common_close_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_close_white' is used in nib 'FrozenView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check' is used in nib 'FrozenView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check_circle' is used in nib 'FrozenView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NodeInputView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NodeInputView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NodeTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NodeTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NodeTableViewCell"
      let name = "NodeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NodeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NodeTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NonFungibleTokenViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NonFungibleTokenViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NonFungibleTokenViewCell"
      let name = "NonFungibleTokenViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NonFungibleTokenViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NonFungibleTokenViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PopTipViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PopTipViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SetSwitchTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SetSwitchTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SetSwitchTableViewCell"
      let name = "SetSwitchTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SetSwitchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetSwitchTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_Facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_Facebook' is used in nib 'SetSwitchTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SetTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SetTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SetTableViewCell"
      let name = "SetTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SetTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cell_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cell_arrow' is used in nib 'SetTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_Facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_Facebook' is used in nib 'SetTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SignedTransactionView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignedTransactionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignedTransactionView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignedTransactionView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_close' is used in nib 'SignedTransactionView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TokenPurchaseView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TokenPurchaseView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TokenPurchaseView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TokenPurchaseView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_close' is used in nib 'TokenPurchaseView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TokenTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TokenTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TokenTableViewCell"
      let name = "TokenTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TokenTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TokenTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TransactionTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TransactionTableViewCell"
      let name = "TransactionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _VoteConfirmView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VoteConfirmView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _VoteInputView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "VoteInputView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VoteInputView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VoteInputView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_close' is used in nib 'VoteInputView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _VoteTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = VoteTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "VoteTableViewCell"
      let name = "VoteTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> VoteTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VoteTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tron_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tron_gray' is used in nib 'VoteTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "vote_input_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'vote_input_icon' is used in nib 'VoteTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "vote_number_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'vote_number_icon' is used in nib 'VoteTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _WalletModeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WalletModeView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletModeView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletModeView
      }
      
      fileprivate init() {}
    }
    
    struct _WalletTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = WalletTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "WalletTableViewCell"
      let name = "WalletTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tron_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tron_white' is used in nib 'WalletTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet_hot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet_hot' is used in nib 'WalletTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _WordCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WordCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "word"
      let name = "WordCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WordCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WordCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try balance.validate()
      try browser.validate()
      try launchScreen.validate()
      try login.validate()
      try main.validate()
      try set.validate()
      try token.validate()
      try transaction.validate()
      try vote.validate()
    }
    
    struct balance: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Balance"
      let offLineSignViewController = StoryboardViewControllerResource<OffLineSignViewController>(identifier: "OffLineSignViewController")
      let otherTokenViewController = StoryboardViewControllerResource<OtherTokenViewController>(identifier: "OtherTokenViewController")
      let receiveNavVC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "ReceiveNavVC")
      let receiveViewController = StoryboardViewControllerResource<ReceiveViewController>(identifier: "ReceiveViewController")
      let sendConfiremViewController = StoryboardViewControllerResource<SendConfiremViewController>(identifier: "SendConfiremViewController")
      let sendNavVC = StoryboardViewControllerResource<BaseNavigationViewController>(identifier: "SendNavVC")
      let sendTransactionViewController = StoryboardViewControllerResource<SendTransactionViewController>(identifier: "SendTransactionViewController")
      
      func offLineSignViewController(_: Void = ()) -> OffLineSignViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offLineSignViewController)
      }
      
      func otherTokenViewController(_: Void = ()) -> OtherTokenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otherTokenViewController)
      }
      
      func receiveNavVC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: receiveNavVC)
      }
      
      func receiveViewController(_: Void = ()) -> ReceiveViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: receiveViewController)
      }
      
      func sendConfiremViewController(_: Void = ()) -> SendConfiremViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendConfiremViewController)
      }
      
      func sendNavVC(_: Void = ()) -> BaseNavigationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendNavVC)
      }
      
      func sendTransactionViewController(_: Void = ()) -> SendTransactionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendTransactionViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "balance_code", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'balance_code' is used in storyboard 'Balance', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_qrcode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qrcode' is used in storyboard 'Balance', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan' is used in storyboard 'Balance', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.balance().offLineSignViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offLineSignViewController' could not be loaded from storyboard 'Balance' as 'OffLineSignViewController'.") }
        if _R.storyboard.balance().otherTokenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otherTokenViewController' could not be loaded from storyboard 'Balance' as 'OtherTokenViewController'.") }
        if _R.storyboard.balance().receiveNavVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'receiveNavVC' could not be loaded from storyboard 'Balance' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.balance().receiveViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'receiveViewController' could not be loaded from storyboard 'Balance' as 'ReceiveViewController'.") }
        if _R.storyboard.balance().sendConfiremViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendConfiremViewController' could not be loaded from storyboard 'Balance' as 'SendConfiremViewController'.") }
        if _R.storyboard.balance().sendNavVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendNavVC' could not be loaded from storyboard 'Balance' as 'BaseNavigationViewController'.") }
        if _R.storyboard.balance().sendTransactionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendTransactionViewController' could not be loaded from storyboard 'Balance' as 'SendTransactionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct browser: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BrowserViewController
      
      let browserViewController = StoryboardViewControllerResource<BrowserViewController>(identifier: "BrowserViewController")
      let bundle = R.hostingBundle
      let name = "Browser"
      
      func browserViewController(_: Void = ()) -> BrowserViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: browserViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.browser().browserViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'browserViewController' could not be loaded from storyboard 'Browser' as 'BrowserViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavigationController
      
      let bundle = R.hostingBundle
      let createWalletViewController = StoryboardViewControllerResource<CreateWalletViewController>(identifier: "CreateWalletViewController")
      let loginHomeViewController = StoryboardViewControllerResource<LoginHomeViewController>(identifier: "LoginHomeViewController")
      let name = "Login"
      
      func createWalletViewController(_: Void = ()) -> CreateWalletViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createWalletViewController)
      }
      
      func loginHomeViewController(_: Void = ()) -> LoginHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginHomeViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "register_check_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_check_n' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_check_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_check_s' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "welcome_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcome_logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.login().createWalletViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createWalletViewController' could not be loaded from storyboard 'Login' as 'CreateWalletViewController'.") }
        if _R.storyboard.login().loginHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginHomeViewController' could not be loaded from storyboard 'Login' as 'LoginHomeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseTabbarViewController
      
      let balanceViewController = StoryboardViewControllerResource<BalanceViewController>(identifier: "BalanceViewController")
      let bundle = R.hostingBundle
      let name = "Main"
      
      func balanceViewController(_: Void = ()) -> BalanceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: balanceViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "balance_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'balance_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cell_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cell_arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_freeze", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_freeze' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tron_power", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tron_power' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_acount_highlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_acount_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_acount_nor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_acount_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setting_highlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_setting_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_setting_nor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_setting_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_token_highlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_token_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_token_nor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_token_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_transactions_highlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_transactions_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_transactions_nor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_transactions_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_vote_highlight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_vote_highlight' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_vote_nor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_vote_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().balanceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'balanceViewController' could not be loaded from storyboard 'Main' as 'BalanceViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct set: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let inputNodeViewController = StoryboardViewControllerResource<InputNodeViewController>(identifier: "InputNodeViewController")
      let name = "Set"
      let nodeListViewController = StoryboardViewControllerResource<NodeListViewController>(identifier: "NodeListViewController")
      let setViewController = StoryboardViewControllerResource<SetViewController>(identifier: "SetViewController")
      let walletListViewController = StoryboardViewControllerResource<WalletListViewController>(identifier: "WalletListViewController")
      
      func inputNodeViewController(_: Void = ()) -> InputNodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inputNodeViewController)
      }
      
      func nodeListViewController(_: Void = ()) -> NodeListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nodeListViewController)
      }
      
      func setViewController(_: Void = ()) -> SetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setViewController)
      }
      
      func walletListViewController(_: Void = ()) -> WalletListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletListViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_add' is used in storyboard 'Set', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.set().inputNodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inputNodeViewController' could not be loaded from storyboard 'Set' as 'InputNodeViewController'.") }
        if _R.storyboard.set().nodeListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nodeListViewController' could not be loaded from storyboard 'Set' as 'NodeListViewController'.") }
        if _R.storyboard.set().setViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setViewController' could not be loaded from storyboard 'Set' as 'SetViewController'.") }
        if _R.storyboard.set().walletListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletListViewController' could not be loaded from storyboard 'Set' as 'WalletListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct token: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let createTokenViewController = StoryboardViewControllerResource<CreateTokenViewController>(identifier: "CreateTokenViewController")
      let name = "Token"
      let tokenListViewController = StoryboardViewControllerResource<TokenListViewController>(identifier: "TokenListViewController")
      
      func createTokenViewController(_: Void = ()) -> CreateTokenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createTokenViewController)
      }
      
      func tokenListViewController(_: Void = ()) -> TokenListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tokenListViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common_add' is used in storyboard 'Token', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_check_n", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_check_n' is used in storyboard 'Token', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_check_s", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_check_s' is used in storyboard 'Token', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.token().createTokenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createTokenViewController' could not be loaded from storyboard 'Token' as 'CreateTokenViewController'.") }
        if _R.storyboard.token().tokenListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tokenListViewController' could not be loaded from storyboard 'Token' as 'TokenListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct transaction: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Transaction"
      let transactionDetailViewController = StoryboardViewControllerResource<TransactionDetailViewController>(identifier: "TransactionDetailViewController")
      let transactionsListViewController = StoryboardViewControllerResource<TransactionsListViewController>(identifier: "TransactionsListViewController")
      
      func transactionDetailViewController(_: Void = ()) -> TransactionDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionDetailViewController)
      }
      
      func transactionsListViewController(_: Void = ()) -> TransactionsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionsListViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "transaction_detail_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'transaction_detail_check' is used in storyboard 'Transaction', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.transaction().transactionDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionDetailViewController' could not be loaded from storyboard 'Transaction' as 'TransactionDetailViewController'.") }
        if _R.storyboard.transaction().transactionsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionsListViewController' could not be loaded from storyboard 'Transaction' as 'TransactionsListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct vote: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Vote"
      let voteViewController = StoryboardViewControllerResource<VoteViewController>(identifier: "VoteViewController")
      
      func voteViewController(_: Void = ()) -> VoteViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: voteViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.vote().voteViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'voteViewController' could not be loaded from storyboard 'Vote' as 'VoteViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
